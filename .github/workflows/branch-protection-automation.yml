name: Branch Protection Setup

on:
  push:
    branches: [master]
    paths:
      - '.github/branch-protection-config.json'
      - '.github/workflows/branch-protection-automation.yml'
  workflow_dispatch:

permissions:
  administration: write
  contents: read

jobs:
  setup-branch-protection:
    name: 🔒 Configure Branch Protection with Audio Quality Gates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup branch protection rules
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            
            // Branch protection configuration with audio quality focus
            const branchProtectionConfig = {
              required_status_checks: {
                strict: true,
                checks: [
                  // Audio quality preservation checks (CRITICAL)
                  { context: "🎵 Audio Quality Preservation Check" },
                  { context: "🧪 Backend Tests with Audio Validation" },
                  { context: "🔗 Integration Tests with MinIO" },
                  
                  // Standard quality checks
                  { context: "🎨 Frontend Tests with Upload Validation" },
                  { context: "🔒 Security Scan" },
                  { context: "🏗️ Build Test" },
                  
                  // PR automation checks
                  { context: "🚫 Block Dangerous Audio Patterns" },
                  { context: "🧪 Require Tests for Audio Changes" },
                ]
              },
              enforce_admins: true,
              required_pull_request_reviews: {
                dismiss_stale_reviews: true,
                require_code_owner_reviews: true,
                required_approving_review_count: 1,
                bypass_pull_request_allowances: {
                  users: [],
                  teams: [],
                  apps: []
                }
              },
              restrictions: null,
              required_linear_history: true,
              allow_force_pushes: false,
              allow_deletions: false,
              block_creations: false,
              required_conversation_resolution: true,
              lock_branch: false,
              allow_fork_syncing: true
            };
            
            // Apply to master branch
            try {
              await github.rest.repos.updateBranchProtection({
                owner,
                repo,
                branch: 'master',
                ...branchProtectionConfig
              });
              
              console.log('✅ Branch protection rules applied to master branch');
              
              // Create a comprehensive status check
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: context.issue.number || 1,
                body: `🔒 **Branch Protection Updated**
                
Master branch protection has been configured with the following audio quality gates:

**Required Status Checks:**
- 🎵 Audio Quality Preservation Check (CRITICAL)
- 🧪 Backend Tests with Audio Validation
- 🔗 Integration Tests with MinIO
- 🎨 Frontend Tests with Upload Validation
- 🔒 Security Scan
- 🏗️ Build Test
- 🚫 Block Dangerous Audio Patterns
- 🧪 Require Tests for Audio Changes

**Protection Rules:**
- ✅ Dismiss stale reviews on new commits
- ✅ Require code owner reviews
- ✅ Require at least 1 approving review
- ✅ Require linear history (no merge commits)
- ✅ Require conversation resolution
- ❌ No force pushes allowed
- ❌ No branch deletion allowed

**Audio Quality Focus:**
All audio-critical changes require passing the audio quality preservation check before merge.`
              });
              
            } catch (error) {
              console.error('Error applying branch protection:', error);
              core.setFailed(`Failed to apply branch protection: ${error.message}`);
            }

  create-rulesets:
    name: 📋 Create Repository Rulesets
    runs-on: ubuntu-latest
    needs: setup-branch-protection
    steps:
      - name: Create audio quality ruleset
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            
            // Create ruleset for audio quality protection
            const audioQualityRuleset = {
              name: "Audio Quality Protection",
              target: "branch",
              enforcement: "active",
              conditions: {
                ref_name: {
                  include: ["~DEFAULT_BRANCH"],
                  exclude: []
                }
              },
              rules: [
                {
                  type: "required_status_checks",
                  parameters: {
                    strict_required_status_checks_policy: true,
                    required_status_checks: [
                      {
                        context: "🎵 Audio Quality Preservation Check",
                        integration_id: null
                      }
                    ]
                  }
                },
                {
                  type: "pull_request",
                  parameters: {
                    dismiss_stale_reviews_on_push: true,
                    require_code_owner_review: true,
                    require_last_push_approval: false,
                    required_approving_review_count: 1,
                    required_review_thread_resolution: true
                  }
                },
                {
                  type: "required_linear_history"
                },
                {
                  type: "force_push"
                },
                {
                  type: "deletion"
                }
              ],
              bypass_actors: []
            };
            
            try {
              // Note: Repository rulesets API might not be available in all GitHub plans
              // This is a fallback that creates an issue to track the ruleset creation
              await github.rest.issues.create({
                owner,
                repo,
                title: "Audio Quality Repository Ruleset Configuration",
                body: `## 🎵 Audio Quality Repository Ruleset
                
This issue tracks the manual configuration of repository rulesets for audio quality protection.

### Required Ruleset Configuration:

\`\`\`json
${JSON.stringify(audioQualityRuleset, null, 2)}
\`\`\`

### Manual Steps Required:
1. Go to Repository Settings > Rules > Rulesets
2. Create new ruleset named "Audio Quality Protection"
3. Apply to default branch (master)
4. Configure the rules as specified above
5. Set enforcement to "Active"

### Key Protection Points:
- Audio Quality Preservation Check is REQUIRED
- Code owner reviews are MANDATORY
- Linear history prevents merge commits
- Force pushes and deletions are BLOCKED

Close this issue once the ruleset is manually configured.`,
                labels: ["configuration", "🎵 audio-critical", "documentation"]
              });
              
              console.log('✅ Audio quality ruleset configuration issue created');
              
            } catch (error) {
              console.error('Error creating ruleset configuration:', error);
            }

  validate-protection:
    name: ✅ Validate Branch Protection
    runs-on: ubuntu-latest
    needs: [setup-branch-protection, create-rulesets]
    steps:
      - name: Validate branch protection is active
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            
            try {
              const protection = await github.rest.repos.getBranchProtection({
                owner,
                repo,
                branch: 'master'
              });
              
              console.log('Current branch protection:', JSON.stringify(protection.data, null, 2));
              
              // Validate audio quality checks are required
              const requiredChecks = protection.data.required_status_checks?.checks || [];
              const hasAudioCheck = requiredChecks.some(check => 
                check.context.includes('Audio Quality Preservation')
              );
              
              if (!hasAudioCheck) {
                core.setFailed('Audio Quality Preservation Check is not required - branch protection incomplete');
                return;
              }
              
              // Validate other critical settings
              const validations = [
                {
                  check: protection.data.required_status_checks?.strict,
                  name: 'Strict status checks'
                },
                {
                  check: protection.data.required_pull_request_reviews?.require_code_owner_reviews,
                  name: 'Code owner reviews'
                },
                {
                  check: protection.data.required_linear_history?.enabled,
                  name: 'Linear history'
                },
                {
                  check: !protection.data.allow_force_pushes?.enabled,
                  name: 'Block force pushes'
                }
              ];
              
              const failedValidations = validations.filter(v => !v.check);
              
              if (failedValidations.length > 0) {
                core.setFailed(`Branch protection validation failed: ${failedValidations.map(v => v.name).join(', ')}`);
                return;
              }
              
              console.log('✅ Branch protection validation passed');
              console.log(`✅ Audio Quality Preservation Check is required`);
              console.log(`✅ Code owner reviews are required`);
              console.log(`✅ Linear history is enforced`);
              console.log(`✅ Force pushes are blocked`);
              
            } catch (error) {
              console.error('Error validating branch protection:', error);
              core.setFailed(`Branch protection validation failed: ${error.message}`);
            }