name: Build and Deploy

on:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: white-plains-gospel-chapel/sermon-uploader

jobs:
  # Build on GitHub's powerful cloud runners
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest  # GitHub's cloud runner with Docker
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            LARGE_FILE_THRESHOLD_MB=100
      
      - name: Create deployment package
        run: |
          # Create a simple deployment script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          
          echo "üöÄ Deploying $IMAGE"
          
          # Stop old container
          docker compose down || true
          
          # Pull new image
          docker pull $IMAGE
          
          # Update docker-compose to use new image
          export SERMON_IMAGE=$IMAGE
          
          # Start with new image
          docker compose up -d
          
          # Health check
          sleep 10
          curl -f http://localhost:8000/api/health || exit 1
          
          echo "‚úÖ Deployment complete!"
          EOF
          
          chmod +x deploy.sh

      - name: Upload deployment script
        uses: actions/upload-artifact@v4
        with:
          name: deployment
          path: deploy.sh

  # Deploy on your Pi (just pull and run, no building)
  deploy:
    name: Deploy to Pi
    needs: build
    runs-on: self-hosted  # Your Pi
    
    steps:
      - name: Download deployment script
        uses: actions/download-artifact@v4
        with:
          name: deployment
      
      - name: Log in to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
      
      - name: Deploy
        env:
          MINIO_ENDPOINT: 192.168.1.127:9000
          MINIO_ACCESS_KEY: gaius
          MINIO_SECRET_KEY: John 3:16
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          LARGE_FILE_THRESHOLD_MB: 100
        run: |
          # Create .env file
          cat > .env << EOL
          MINIO_ENDPOINT=$MINIO_ENDPOINT
          MINIO_ACCESS_KEY=$MINIO_ACCESS_KEY
          MINIO_SECRET_KEY=$MINIO_SECRET_KEY
          MINIO_SECURE=false
          MINIO_BUCKET=sermons
          DISCORD_WEBHOOK_URL=$DISCORD_WEBHOOK_URL
          LARGE_FILE_THRESHOLD_MB=$LARGE_FILE_THRESHOLD_MB
          PORT=8000
          EOL
          
          # Pull and run the pre-built image
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          docker pull $IMAGE
          
          # Stop old container
          docker compose down 2>/dev/null || true
          
          # Run with the new image
          docker run -d \
            --name sermon-uploader \
            --env-file .env \
            -p 8000:8000 \
            --restart unless-stopped \
            $IMAGE
          
          # Wait for health
          sleep 15
          
          # Check health
          if curl -f http://localhost:8000/api/health; then
            echo "‚úÖ Deployment successful!"
          else
            echo "‚ùå Health check failed"
            docker logs sermon-uploader
            exit 1
          fi