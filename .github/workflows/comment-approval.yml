name: Comment-Based Approval System

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

jobs:
  handle-approval-comments:
    if: github.event.issue.pull_request || github.event.pull_request
    runs-on: ubuntu-latest
    steps:
    - name: Check for approval command
      run: |
        # Get the comment body
        if [ "${{ github.event_name }}" = "issue_comment" ]; then
          COMMENT_BODY="${{ github.event.comment.body }}"
          COMMENT_AUTHOR="${{ github.event.comment.user.login }}"
          PR_NUMBER="${{ github.event.issue.number }}"
        else
          COMMENT_BODY="${{ github.event.comment.body }}"
          COMMENT_AUTHOR="${{ github.event.comment.user.login }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
        fi
        
        echo "Comment: $COMMENT_BODY"
        echo "Author: $COMMENT_AUTHOR" 
        echo "PR: $PR_NUMBER"
        
        # Check if this is an approval command
        APPROVAL_PATTERNS=(
          "^approve$"
          "^approved$" 
          "^lgtm$"
          "^looks good$"
          "^ship it$"
          "^merge$"
          "^‚úÖ$"
          "approve.*merge"
          "ready.*merge"
        )
        
        IS_APPROVAL=false
        for pattern in "${APPROVAL_PATTERNS[@]}"; do
          if echo "$COMMENT_BODY" | grep -iE "$pattern" > /dev/null; then
            IS_APPROVAL=true
            break
          fi
        done
        
        if [ "$IS_APPROVAL" != "true" ]; then
          echo "Not an approval command, skipping"
          exit 0
        fi
        
        # Check if commenter has permission (repo owner or collaborator)
        USER_PERMISSION=$(gh api repos/${{ github.repository }}/collaborators/$COMMENT_AUTHOR/permission | jq -r '.permission // "none"')
        
        if [[ "$USER_PERMISSION" =~ ^(admin|write)$ ]] || [ "$COMMENT_AUTHOR" = "${{ github.repository_owner }}" ]; then
          echo "‚úÖ User $COMMENT_AUTHOR has permission to approve"
        else
          echo "‚ùå User $COMMENT_AUTHOR does not have approval permissions"
          gh pr comment $PR_NUMBER --body "‚ùå **Approval Denied**
          
          @$COMMENT_AUTHOR does not have permission to approve PRs. Only repository collaborators with write access can approve via comments.
          
          **Approved Comment Patterns**:
          - \`approve\` or \`approved\`
          - \`lgtm\` (looks good to me)
          - \`merge\` or \`ship it\` 
          - \`‚úÖ\`"
          exit 0
        fi
        
        # Get PR details to determine if we can auto-merge
        PR_INFO=$(gh pr view $PR_NUMBER --json mergeable,mergeStateStatus,state,isDraft)
        PR_STATE=$(echo "$PR_INFO" | jq -r '.state')
        IS_DRAFT=$(echo "$PR_INFO" | jq -r '.isDraft')
        IS_MERGEABLE=$(echo "$PR_INFO" | jq -r '.mergeable')
        MERGE_STATUS=$(echo "$PR_INFO" | jq -r '.mergeStateStatus')
        
        echo "PR State: $PR_STATE"
        echo "Is Draft: $IS_DRAFT" 
        echo "Is Mergeable: $IS_MERGEABLE"
        echo "Merge Status: $MERGE_STATUS"
        
        if [ "$PR_STATE" != "OPEN" ]; then
          gh pr comment $PR_NUMBER --body "‚ùå **Cannot Approve**
          
          This PR is not in an open state (current state: $PR_STATE)."
          exit 0
        fi
        
        if [ "$IS_DRAFT" = "true" ]; then
          gh pr comment $PR_NUMBER --body "‚ùå **Cannot Approve**
          
          This PR is still a draft. Please mark it ready for review first."
          exit 0
        fi
        
        # Add approval comment first
        gh pr comment $PR_NUMBER --body "‚úÖ **COMMENT-BASED APPROVAL**
        
        **Approved by**: @$COMMENT_AUTHOR
        **Approval Method**: Comment-based approval
        **Status**: Ready for merge
        
        $([ "$IS_MERGEABLE" = "MERGEABLE" ] && echo "üöÄ **Auto-merging now...**" || echo "‚è≥ **Waiting for checks to pass before auto-merge**")"
        
        # Try to merge if all checks pass
        if [ "$IS_MERGEABLE" = "MERGEABLE" ] && [ "$MERGE_STATUS" = "CLEAN" ]; then
          echo "üöÄ Attempting auto-merge..."
          
          if gh pr merge $PR_NUMBER --squash --body "Auto-merged via comment approval by @$COMMENT_AUTHOR"; then
            echo "‚úÖ Successfully auto-merged PR #$PR_NUMBER"
            
            # Extract issue number and close if applicable
            PR_BODY=$(gh pr view $PR_NUMBER --json body | jq -r '.body')
            ISSUE_NUM=$(echo "$PR_BODY" | grep -oiE "(closes?|fixes?|resolves?) #([0-9]+)" | grep -oE "[0-9]+" | head -1)
            
            if [ -n "$ISSUE_NUM" ]; then
              gh issue comment $ISSUE_NUM --body "‚úÖ **AUTO-CLOSED VIA COMMENT APPROVAL**
              
              **Merged PR**: #${PR_NUMBER}
              **Approved by**: @$COMMENT_AUTHOR  
              **Method**: Comment-based approval and auto-merge
              **Status**: Implementation complete
              
              üéâ Issue resolved through streamlined approval process!"
            fi
            
          else
            echo "‚ùå Auto-merge failed"
            gh pr comment $PR_NUMBER --body "‚ùå **Auto-merge Failed**
            
            The PR was approved but could not be automatically merged. Please check:
            - All required status checks are passing
            - No merge conflicts exist
            - Branch protection rules are satisfied
            
            You may need to merge manually."
          fi
          
        elif [ "$IS_MERGEABLE" = "CONFLICTING" ]; then
          gh pr comment $PR_NUMBER --body "‚ö†Ô∏è **Approval Recorded - Manual Merge Required**
          
          This PR has merge conflicts that need to be resolved before merging.
          Please resolve conflicts and the PR will be ready for merge."
          
        else
          gh pr comment $PR_NUMBER --body "‚ö†Ô∏è **Approval Recorded - Waiting for Checks**
          
          This PR is approved but waiting for:
          - Required status checks to pass
          - Any remaining validation to complete
          
          The PR will auto-merge once all requirements are satisfied."
        fi
        
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}