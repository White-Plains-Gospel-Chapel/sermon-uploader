name: Simple Deploy to Pi

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  # First, let's just test if we can trigger the self-hosted runner
  test-runner:
    name: Test Self-Hosted Runner
    runs-on: self-hosted
    steps:
      - name: Test runner is working
        run: |
          echo "‚úÖ Self-hosted runner is responding!"
          echo "Runner hostname: $(hostname)"
          echo "Runner user: $(whoami)"
          echo "Current directory: $(pwd)"
          
  # Now let's actually deploy
  deploy:
    name: Deploy Latest Master
    runs-on: self-hosted
    needs: test-runner
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v4
        with:
          clean: true
          fetch-depth: 0
          
      - name: Show what we got
        run: |
          echo "üìç Current commit: $(git rev-parse HEAD)"
          echo "üìç Latest master: $(git rev-parse origin/master || git rev-parse origin/main)"
          echo "üìç Working directory: $(pwd)"
          
      - name: Pull latest and build
        run: |
          echo "üîÑ Pulling latest code..."
          git pull origin master || git pull origin main
          
          echo "üèóÔ∏è Building Docker image..."
          docker build -t sermon-uploader:latest .
          
          echo "‚úÖ Build complete!"
          
      - name: Deploy the container
        run: |
          echo "üöÄ Deploying container..."
          
          # Navigate to where docker-compose file is
          DEPLOY_DIR="/home/gaius/actions-runner/_work/sermon-uploader/sermon-uploader"
          cd "$DEPLOY_DIR"
          
          # Stop old container
          docker compose -f docker-compose.single.yml down || true
          
          # Start new container with latest image
          docker compose -f docker-compose.single.yml up -d
          
          echo "‚è≥ Waiting for service to start..."
          sleep 10
          
      - name: Verify deployment
        run: |
          echo "üè• Checking if service is healthy..."
          
          if curl -f http://localhost:8000/api/health; then
            echo "‚úÖ Deployment successful! Service is healthy."
          else
            echo "‚ùå Service health check failed"
            docker compose -f docker-compose.single.yml logs --tail=50
            exit 1
          fi
          
      - name: Show deployment info
        if: success()
        run: |
          echo "üìä Deployment Summary:"
          echo "========================"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Image}}"
          echo ""
          echo "Git commit: $(git rev-parse --short HEAD)"
          echo "Deployment time: $(date)"
          
      - name: Discord notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            MESSAGE="‚úÖ Successfully deployed latest master to Pi"
            COLOR="3066993"
          else
            MESSAGE="‚ùå Deployment to Pi failed"
            COLOR="15158332"
          fi
          
          WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
          if [ -n "$WEBHOOK_URL" ]; then
            curl -X POST "$WEBHOOK_URL" \
              -H "Content-Type: application/json" \
              -d "{
                \"embeds\": [{
                  \"title\": \"Deployment Status\",
                  \"description\": \"$MESSAGE\",
                  \"color\": $COLOR,
                  \"fields\": [
                    {\"name\": \"Commit\", \"value\": \"$(git rev-parse --short HEAD)\", \"inline\": true},
                    {\"name\": \"Branch\", \"value\": \"${{ github.ref_name }}\", \"inline\": true}
                  ]
                }]
              }" || echo "Discord notification failed"
          fi