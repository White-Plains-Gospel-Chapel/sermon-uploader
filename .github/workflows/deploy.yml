name: Deploy to Raspberry Pi

on:
  push:
    branches: [main, master]
    paths:
      # Only deploy on actual code/app changes, not docs/config
      - 'backend/**'
      - 'frontend/**'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - '.github/workflows/deploy.yml'
      - 'package.json'
      - 'go.mod'
      - 'start.sh'
  pull_request:
    branches: [main, master]
    types: [opened, synchronize]
    paths:
      # Only test deployment on code changes
      - 'backend/**'
      - 'frontend/**'
      - 'Dockerfile'
      - 'docker-compose.yml'
  workflow_dispatch:
    # Manual trigger option

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security scan before building
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run secret detection
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          
  # Build and push Docker image
  build-and-push:
    needs: security-scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
          config-inline: |
            [registry."docker.io"]
              mirrors = ["https://mirror.gcr.io"]

      - name: Wait for Docker Hub availability
        run: |
          for i in {1..3}; do
            if curl -sSf https://registry-1.docker.io/v2/ > /dev/null 2>&1; then
              echo "Docker Hub is accessible"
              break
            else
              echo "Docker Hub check failed, attempt $i/3"
              sleep 10
            fi
          done

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          network: host
        env:
          BUILDX_NO_DEFAULT_ATTESTATIONS: 1

  # Deploy to Raspberry Pi - runs directly on Pi
  deploy-to-pi:
    needs: build-and-push
    runs-on: self-hosted
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          clean: true
          fetch-depth: 0
      
      - name: Deploy to Pi
        run: |
          echo "üöÄ Starting deployment on self-hosted runner..."
          echo "Current directory: $(pwd)"
          echo "Current commit: $(git rev-parse HEAD)"
          
          # Pull latest to ensure we have everything
          git pull origin master || git pull origin main
          
          # Use the correct docker-compose file (single.yml for Pi)
          COMPOSE_FILE="docker-compose.single.yml"
          if [ ! -f "$COMPOSE_FILE" ]; then
            echo "Warning: $COMPOSE_FILE not found, using docker-compose.yml"
            COMPOSE_FILE="docker-compose.yml"
          fi
          
          # Create/update .env file with proper MinIO endpoint for single container
          cat > .env << EOL
          # MinIO Configuration (localhost since it's in same container)
          MINIO_ENDPOINT=localhost:9000
          MINIO_ACCESS_KEY=${{ secrets.MINIO_ACCESS_KEY }}
          MINIO_SECRET_KEY=${{ secrets.MINIO_SECRET_KEY }}
          MINIO_SECURE=false
          MINIO_BUCKET=${{ secrets.MINIO_BUCKET }}
          
          # Discord Configuration  
          DISCORD_WEBHOOK_URL=${{ secrets.DISCORD_WEBHOOK_URL }}
          
          # Application Configuration
          WAV_SUFFIX=${{ secrets.WAV_SUFFIX }}
          AAC_SUFFIX=${{ secrets.AAC_SUFFIX }}
          BATCH_THRESHOLD=${{ secrets.BATCH_THRESHOLD }}
          PORT=${{ secrets.PORT }}
          
          # Generated at deployment
          DEPLOYMENT_ID=${GITHUB_SHA:0:7}
          DEPLOYMENT_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          EOL
          
          # Set proper permissions
          chmod 600 .env
          
          # Build the image locally on Pi (no registry needed)
          echo "üèóÔ∏è Building Docker image locally..."
          docker build -t sermon-uploader:latest .
          
          # Stop old container
          echo "üõë Stopping old container..."
          docker compose -f "$COMPOSE_FILE" down || true
          
          # Start new container with locally built image
          echo "üöÄ Starting new container..."
          docker compose -f "$COMPOSE_FILE" up -d
          
          # Wait for service to be ready
          echo "‚è≥ Waiting for service to start..."
          sleep 15
          
          # Health check with retry
          for i in {1..5}; do
            if curl -f http://localhost:8000/api/health >/dev/null 2>&1; then
              echo "‚úÖ Deployment successful - Health check passed (attempt $i)"
              break
            elif [ $i -eq 5 ]; then
              echo "‚ùå Deployment failed - Health check failed after 5 attempts"
              docker compose -f "$COMPOSE_FILE" logs --tail=50
              exit 1
            else
              echo "‚è≥ Health check failed, retrying in 10s... (attempt $i)"
              sleep 10
            fi
          done
          
          # Clean up old images
          echo "üßπ Cleaning up old images..."
          docker image prune -af --filter="until=24h" || true
          
          # Show final status
          echo "üìä Deployment complete!"
          docker compose -f "$COMPOSE_FILE" ps
          
          echo "üéâ All systems operational!"

      - name: Discord deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            MESSAGE="‚úÖ Successfully deployed latest master to Pi"
            COLOR="3066993"
          else
            MESSAGE="‚ùå Deployment to Pi failed"
            COLOR="15158332"
          fi
          
          WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
          if [ -n "$WEBHOOK_URL" ]; then
            curl -X POST "$WEBHOOK_URL" \
              -H "Content-Type: application/json" \
              -d "{
                \"embeds\": [{
                  \"title\": \"Deployment Status\",
                  \"description\": \"$MESSAGE\",
                  \"color\": $COLOR,
                  \"fields\": [
                    {\"name\": \"Commit\", \"value\": \"$(git rev-parse --short HEAD)\", \"inline\": true},
                    {\"name\": \"Branch\", \"value\": \"${{ github.ref_name }}\", \"inline\": true}
                  ]
                }]
              }" || echo "Discord notification failed"
          fi


  # Notify deployment status
  notify:
    needs: [build-and-push, deploy-to-pi]
    runs-on: ubuntu-latest
    if: false  # DISABLED - Discord only
    
    steps:
      - name: Notify Discord
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          STATUS="${{ needs.deploy-to-pi.result }}"
          BUILD_STATUS="${{ needs.build-and-push.result }}"
          COLOR="65280"  # Green
          TITLE="üöÄ Deployment Successful"
          DESCRIPTION="Sermon uploader successfully deployed to Raspberry Pi"
          
          if [ "$STATUS" != "success" ] || [ "$BUILD_STATUS" != "success" ]; then
            COLOR="16711680"  # Red
            TITLE="‚ùå Deployment Failed"
            DESCRIPTION="Deployment to Raspberry Pi encountered errors"
          fi
          
          # Only send notification if webhook URL is provided
          if [ -n "$DISCORD_WEBHOOK" ]; then
            curl -X POST "$DISCORD_WEBHOOK" \
              -H "Content-Type: application/json" \
              -d "{
                \"embeds\": [{
                  \"title\": \"$TITLE\",
                  \"description\": \"$DESCRIPTION\",
                  \"color\": $COLOR,
                  \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\",
                  \"fields\": [
                    {\"name\": \"Repository\", \"value\": \"${{ github.repository }}\", \"inline\": true},
                    {\"name\": \"Branch\", \"value\": \"${{ github.ref_name }}\", \"inline\": true},
                    {\"name\": \"Commit\", \"value\": \"${{ github.sha }}\", \"inline\": false},
                    {\"name\": \"Build Status\", \"value\": \"$BUILD_STATUS\", \"inline\": true},
                    {\"name\": \"Deploy Status\", \"value\": \"$STATUS\", \"inline\": true},
                    {\"name\": \"Actor\", \"value\": \"${{ github.actor }}\", \"inline\": true}
                  ],
                  \"footer\": {
                    \"text\": \"GitHub Actions\"
                  }
                }]
              }"
          else
            echo "No Discord webhook configured, skipping notification"
          fi
