name: Deploy to Raspberry Pi

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Pi
    runs-on: self-hosted
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          clean: true
          fetch-depth: 1
      
      - name: Deploy
        run: |
          echo "üöÄ Deploying commit: $(git rev-parse --short HEAD)"
          
          # Pull latest
          git pull origin master || git pull origin main
          
          # Create working .env (NO http:// prefix for MINIO_ENDPOINT!)
          cat > .env << 'EOL'
          MINIO_ENDPOINT=localhost:9000
          MINIO_ACCESS_KEY=gaius
          MINIO_SECRET_KEY=John 3:16
          MINIO_SECURE=false
          MINIO_BUCKET=sermons
          DISCORD_WEBHOOK_URL=${{ secrets.DISCORD_WEBHOOK_URL }}
          WAV_SUFFIX=_raw
          AAC_SUFFIX=_streamable
          BATCH_THRESHOLD=2
          PORT=8000
          EOL
          
          echo "üìù Created .env with MINIO_ENDPOINT=localhost:9000 (no http:// prefix)"
          
          # Build locally
          echo "üèóÔ∏è Building Docker image..."
          docker build -t sermon-uploader:latest .
          
          # Stop and remove old container
          echo "üîÑ Restarting container..."
          docker compose -f docker-compose.single.yml down || true
          
          # Start new container
          docker compose -f docker-compose.single.yml up -d
          
          # Wait longer for MinIO to initialize
          echo "‚è≥ Waiting 30s for MinIO to initialize..."
          sleep 30
          
          # Health check with better retry logic
          echo "üè• Checking health..."
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt/$max_attempts..."
            
            if curl -f -s http://localhost:8000/api/health > /dev/null 2>&1; then
              echo "‚úÖ Health check passed!"
              echo "Response: $(curl -s http://localhost:8000/api/health)"
              break
            fi
            
            if [ $attempt -eq $max_attempts ]; then
              echo "‚ùå Health check failed after $max_attempts attempts"
              echo "Container logs:"
              docker compose -f docker-compose.single.yml logs --tail=100
              exit 1
            fi
            
            echo "Waiting 10s before retry..."
            sleep 10
            attempt=$((attempt + 1))
          done
          
          # Clean up
          docker image prune -af --filter="until=24h" || true
          
          echo "üéâ Deployment complete!"
          docker ps --format "table {{.Names}}\t{{.Status}}"