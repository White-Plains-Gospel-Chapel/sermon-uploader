name: Build and Deploy Docker Images

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_PREFIX: sermon-uploader

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64,linux/amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-backend
            ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=pi5,enable={{is_default_branch}}

      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/arm64,linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-backend:latest
            ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-backend:pi5
            ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend-react
          platforms: linux/arm64,linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-frontend:latest
            ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-frontend:pi5
            ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-pi:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH
        env:
          PI_SSH_KEY: ${{ secrets.PI_SSH_KEY }}
        if: env.PI_SSH_KEY != ''
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PI_SSH_KEY }}" > ~/.ssh/pi_key
          chmod 600 ~/.ssh/pi_key
          echo "Host pi" >> ~/.ssh/config
          echo "  HostName 192.168.1.127" >> ~/.ssh/config
          echo "  User gaius" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/pi_key" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Deploy to Pi via SSH
        env:
          PI_SSH_KEY: ${{ secrets.PI_SSH_KEY }}
        if: env.PI_SSH_KEY != ''
        run: |
          ssh pi << 'EOF'
            set -e
            echo "üöÄ Starting deployment on Raspberry Pi..."
            
            # Check if project directory exists, create if not
            if [ ! -d "/opt/sermon-uploader" ]; then
              echo "üìÅ Creating project directory..."
              sudo mkdir -p /opt/sermon-uploader
              sudo chown $USER:$USER /opt/sermon-uploader
              cd /opt
              git clone https://github.com/White-Plains-Gospel-Chapel/sermon-uploader.git
            fi
            
            cd /opt/sermon-uploader
            
            echo "üì• Pulling latest code..."
            git pull origin master
            
            # Check which docker compose command is available
            if command -v "docker-compose" &> /dev/null; then
              DOCKER_COMPOSE="docker-compose"
            elif docker compose version &> /dev/null 2>&1; then
              DOCKER_COMPOSE="docker compose"
            else
              echo "‚ùå Docker Compose not found. Installing..."
              sudo apt-get update && sudo apt-get install -y docker-compose-plugin
              DOCKER_COMPOSE="docker compose"
            fi
            
            echo "üì¶ Pulling Docker images from Docker Hub..."
            $DOCKER_COMPOSE -f docker-compose.pi5.yml pull
            
            echo "üîÑ Restarting services..."
            $DOCKER_COMPOSE -f docker-compose.pi5.yml down || true
            $DOCKER_COMPOSE -f docker-compose.pi5.yml up -d
            
            echo "üßπ Cleaning up old images..."
            docker image prune -f || true
            
            echo "‚úÖ Deployment complete!"
            docker ps
          EOF

      - name: Fallback - Webhook deployment
        env:
          PI_SSH_KEY: ${{ secrets.PI_SSH_KEY }}
          PI_WEBHOOK_URL: ${{ secrets.PI_WEBHOOK_URL }}
        if: env.PI_SSH_KEY == '' && env.PI_WEBHOOK_URL != ''
        run: |
          curl -X POST ${{ secrets.PI_WEBHOOK_URL }} \
            -H "Content-Type: application/json" \
            -H "X-GitHub-Event: deployment" \
            -d '{
              "action": "deploy",
              "repository": "${{ github.repository }}",
              "sha": "${{ github.sha }}",
              "ref": "${{ github.ref }}",
              "images": {
                "backend": "${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-backend:pi5",
                "frontend": "${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-frontend:pi5"
              }
            }'

      - name: Manual deployment instructions
        env:
          PI_SSH_KEY: ${{ secrets.PI_SSH_KEY }}
          PI_WEBHOOK_URL: ${{ secrets.PI_WEBHOOK_URL }}
        if: env.PI_SSH_KEY == '' && env.PI_WEBHOOK_URL == ''
        run: |
          echo "‚ö†Ô∏è Automatic deployment not configured."
          echo ""
          echo "To enable automatic deployment, add one of these to GitHub Secrets:"
          echo "1. PI_SSH_KEY - SSH private key for Pi access"
          echo "2. PI_WEBHOOK_URL - Webhook URL for deployment trigger"
          echo ""
          echo "Images are available on Docker Hub. Deploy manually on Pi:"
          echo "  docker compose -f docker-compose.pi5.yml pull"
          echo "  docker compose -f docker-compose.pi5.yml up -d"

      - name: Notify Discord
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            COLOR=3066993
            TITLE="‚úÖ Docker Images Built and Pushed"
            DESCRIPTION="New images are available for deployment"
          else
            COLOR=15158332
            TITLE="‚ùå Docker Build Failed"
            DESCRIPTION="Check the GitHub Actions logs for details"
          fi

          curl -X POST $DISCORD_WEBHOOK \
            -H "Content-Type: application/json" \
            -d "{
              \"embeds\": [{
                \"title\": \"$TITLE\",
                \"description\": \"$DESCRIPTION\",
                \"color\": $COLOR,
                \"fields\": [
                  {
                    \"name\": \"Repository\",
                    \"value\": \"${{ github.repository }}\",
                    \"inline\": true
                  },
                  {
                    \"name\": \"Commit\",
                    \"value\": \"\`${{ github.sha }}\`\",
                    \"inline\": true
                  },
                  {
                    \"name\": \"Images\",
                    \"value\": \"Backend: \`sermon-uploader-backend:pi5\`\\nFrontend: \`sermon-uploader-frontend:pi5\`\"
                  }
                ],
                \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
              }]
            }"