name: Build and Deploy Docker Images

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_PREFIX: sermon-uploader

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64,linux/amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-backend
            ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=pi5,enable={{is_default_branch}}

      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/arm64,linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-backend:latest
            ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-backend:pi5
            ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend-react
          platforms: linux/arm64,linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-frontend:latest
            ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-frontend:pi5
            ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-pi:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Trigger deployment on Pi
        run: |
          # Option 1: SSH deployment (requires SSH key setup)
          # Uncomment and configure if you have SSH access set up
          # ssh -o StrictHostKeyChecking=no pi@192.168.1.127 << 'EOF'
          #   cd /opt/sermon-uploader
          #   git pull origin master
          #   docker compose -f docker-compose.pi5.yml pull
          #   docker compose -f docker-compose.pi5.yml up -d
          # EOF

          # Option 2: Webhook trigger (requires webhook listener on Pi)
          # This sends a webhook to trigger deployment
          if [ -n "${{ secrets.PI_WEBHOOK_URL }}" ]; then
            curl -X POST ${{ secrets.PI_WEBHOOK_URL }} \
              -H "Content-Type: application/json" \
              -H "X-GitHub-Event: deployment" \
              -d '{
                "action": "deploy",
                "repository": "${{ github.repository }}",
                "sha": "${{ github.sha }}",
                "ref": "${{ github.ref }}",
                "images": {
                  "backend": "${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-backend:pi5",
                  "frontend": "${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-frontend:pi5"
                }
              }'
          else
            echo "⚠️ PI_WEBHOOK_URL not configured. Skipping Pi deployment trigger."
            echo "Images are available on Docker Hub. Deploy manually on Pi using:"
            echo "  docker compose -f docker-compose.pi5.yml pull"
            echo "  docker compose -f docker-compose.pi5.yml up -d"
          fi

      - name: Notify Discord
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            COLOR=3066993
            TITLE="✅ Docker Images Built and Pushed"
            DESCRIPTION="New images are available for deployment"
          else
            COLOR=15158332
            TITLE="❌ Docker Build Failed"
            DESCRIPTION="Check the GitHub Actions logs for details"
          fi

          curl -X POST $DISCORD_WEBHOOK \
            -H "Content-Type: application/json" \
            -d "{
              \"embeds\": [{
                \"title\": \"$TITLE\",
                \"description\": \"$DESCRIPTION\",
                \"color\": $COLOR,
                \"fields\": [
                  {
                    \"name\": \"Repository\",
                    \"value\": \"${{ github.repository }}\",
                    \"inline\": true
                  },
                  {
                    \"name\": \"Commit\",
                    \"value\": \"\`${{ github.sha }}\`\",
                    \"inline\": true
                  },
                  {
                    \"name\": \"Images\",
                    \"value\": \"Backend: \`sermon-uploader-backend:pi5\`\\nFrontend: \`sermon-uploader-frontend:pi5\`\"
                  }
                ],
                \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
              }]
            }"