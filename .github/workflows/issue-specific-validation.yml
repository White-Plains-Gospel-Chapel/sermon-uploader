name: Issue-Specific Validation

on:
  pull_request:
    types: [opened, synchronize]
    branches: [master, main]
  workflow_dispatch:

# Cancel in-progress runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-issue-context:
    name: Validate Issue Context
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Extract issue number from branch
        id: extract-issue
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          echo "Branch name: $BRANCH_NAME"
          
          # Try to extract issue number from branch name patterns like:
          # - feature/issue-123-description
          # - issue-123-fix-something
          # - hotfix/issue-123
          ISSUE_NUM=""
          if [[ "$BRANCH_NAME" =~ issue-([0-9]+) ]]; then
            ISSUE_NUM="${BASH_REMATCH[1]}"
          elif [[ "$BRANCH_NAME" =~ ([0-9]+)-.*$ ]]; then
            ISSUE_NUM="${BASH_REMATCH[1]}"
          fi
          
          echo "issue_number=$ISSUE_NUM" >> $GITHUB_OUTPUT
          echo "has_issue=$([ -n "$ISSUE_NUM" ] && echo true || echo false)" >> $GITHUB_OUTPUT
          
          if [ -n "$ISSUE_NUM" ]; then
            echo "‚úÖ Found issue number: $ISSUE_NUM"
          else
            echo "‚ÑπÔ∏è  No issue number found in branch name"
          fi
      
      - name: Validate issue exists
        if: steps.extract-issue.outputs.has_issue == 'true'
        run: |
          ISSUE_NUM="${{ steps.extract-issue.outputs.issue_number }}"
          echo "üîç Checking if issue #$ISSUE_NUM exists..."
          
          # Check if the issue exists using GitHub API
          RESPONSE=$(curl -s -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUM")
          
          HTTP_CODE="${RESPONSE: -3}"
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Issue #$ISSUE_NUM exists and is accessible"
          elif [ "$HTTP_CODE" = "404" ]; then
            echo "‚ùå Issue #$ISSUE_NUM does not exist"
            exit 1
          else
            echo "‚ö†Ô∏è  Unable to verify issue #$ISSUE_NUM (HTTP $HTTP_CODE)"
            echo "This might be a permissions issue or API rate limit"
          fi
        continue-on-error: true
      
      - name: Validate PR title and description
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          
          echo "üìù Validating PR title: $PR_TITLE"
          
          # Check for basic PR title patterns
          if [[ ${#PR_TITLE} -lt 10 ]]; then
            echo "‚ùå PR title is too short (minimum 10 characters)"
            exit 1
          fi
          
          # Check if PR body exists and has meaningful content
          if [ -z "$PR_BODY" ] || [ ${#PR_BODY} -lt 20 ]; then
            echo "‚ö†Ô∏è  PR description is very short or missing"
            echo "Consider adding more details about the changes"
          else
            echo "‚úÖ PR has adequate description"
          fi
          
          echo "‚úÖ PR title validation passed"

  pre-merge-checks:
    name: Pre-merge Validation
    runs-on: ubuntu-latest
    needs: validate-issue-context
    if: always() && !cancelled()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check for merge conflicts
        run: |
          echo "üîç Checking for potential merge conflicts..."
          
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Check if any critical files might have conflicts
          CRITICAL_FILES=""
          while IFS= read -r file; do
            if [[ "$file" =~ \.(go|js|ts|tsx|yml|yaml|json)$ ]]; then
              CRITICAL_FILES="$CRITICAL_FILES $file"
            fi
          done <<< "$CHANGED_FILES"
          
          if [ -n "$CRITICAL_FILES" ]; then
            echo "‚úÖ Critical files detected, merge conflict check passed"
          fi
      
      - name: Validate CI/CD integrity
        run: |
          echo "üîç Validating CI/CD configuration integrity..."
          
          # Check that required workflow files exist
          REQUIRED_WORKFLOWS=(
            ".github/workflows/main-ci.yml"
            ".github/workflows/smart-protection.yml"
          )
          
          for workflow in "${REQUIRED_WORKFLOWS[@]}"; do
            if [ -f "$workflow" ]; then
              echo "‚úÖ $workflow exists"
            else
              echo "‚ùå Missing required workflow: $workflow"
              exit 1
            fi
          done
          
          # Validate YAML syntax for workflow files
          for workflow_file in .github/workflows/*.yml; do
            if [ -f "$workflow_file" ]; then
              echo "Validating $workflow_file..."
              # Basic YAML validation using python
              python3 -c "
import yaml
import sys
try:
    with open('$workflow_file', 'r') as f:
        yaml.safe_load(f)
    print('‚úÖ $workflow_file is valid YAML')
except Exception as e:
    print('‚ùå $workflow_file has invalid YAML:', e)
    sys.exit(1)
"
            fi
          done
          
          echo "‚úÖ CI/CD integrity validation passed"

  validation-summary:
    name: Validation Summary
    needs: [validate-issue-context, pre-merge-checks]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate validation summary
        run: |
          echo "## üîç Issue-Specific Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Issue Context**: ${{ needs.validate-issue-context.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-merge Checks**: ${{ needs.pre-merge-checks.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.validate-issue-context.result }}" == "success" && "${{ needs.pre-merge-checks.result }}" == "success" ]]; then
            echo "‚úÖ All issue-specific validations passed" >> $GITHUB_STEP_SUMMARY
            echo "This PR is ready for code review"
            exit 0
          else
            echo "‚ùå Some validations failed" >> $GITHUB_STEP_SUMMARY
            echo "Please review and address the issues above"
            exit 1
          fi