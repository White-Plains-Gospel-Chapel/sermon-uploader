name: Issue-Specific PR Validation

on:
  pull_request:
    types: [opened, synchronize, edited]

jobs:
  issue-specific-validation:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Extract issue number and validate
      run: |
        PR_NUMBER=${{ github.event.pull_request.number }}
        PR_BODY="${{ github.event.pull_request.body }}"
        PR_TITLE="${{ github.event.pull_request.title }}"
        
        # Extract issue number from PR body
        ISSUE_NUM=$(echo "$PR_BODY" | grep -oiE "(closes?|fixes?|resolves?) #([0-9]+)" | grep -oE "[0-9]+" | head -1)
        
        if [ -z "$ISSUE_NUM" ]; then
          echo "::warning::No issue reference found, skipping issue-specific validation"
          exit 0
        fi
        
        echo "üéØ Validating PR for Issue #${ISSUE_NUM}"
        
        VALIDATION_FAILED=false
        REQUIREMENTS=()
        MISSING=()
        
        # Issue-specific validation rules
        case "$ISSUE_NUM" in
          1)
            # CloudFlare Tunnel Implementation
            echo "üì° Validating CloudFlare Tunnel implementation..."
            REQUIREMENTS+=("‚úì CloudFlare tunnel configuration file")
            REQUIREMENTS+=("‚úì Tunnel authentication/credentials setup")
            REQUIREMENTS+=("‚úì Public URL testing evidence")
            REQUIREMENTS+=("‚úì No exposed ports verification")
            
            if ! echo "$PR_BODY" | grep -iE "(tunnel|cloudflare|cloudflared)" > /dev/null; then
              MISSING+=("‚ùå Must mention CloudFlare tunnel configuration")
              VALIDATION_FAILED=true
            fi
            
            if ! echo "$PR_BODY" | grep -iE "(test.*url|public.*access|tunnel.*test)" > /dev/null; then
              MISSING+=("‚ùå Must include public URL testing evidence")
              VALIDATION_FAILED=true
            fi
            
            if ! echo "$PR_BODY" | grep -iE "(no.*port|port.*closed|zero.*exposure)" > /dev/null; then
              MISSING+=("‚ö†Ô∏è Should verify no ports are exposed")
            fi
            ;;
            
          2)
            # VPN Configuration
            echo "üîê Validating VPN configuration..."
            REQUIREMENTS+=("‚úì VPN connection testing from external network")
            REQUIREMENTS+=("‚úì Admin access verification")
            REQUIREMENTS+=("‚úì Network routing documentation")
            
            if ! echo "$PR_BODY" | grep -iE "(vpn|teleport|identity|route)" > /dev/null; then
              MISSING+=("‚ùå Must document VPN configuration")
              VALIDATION_FAILED=true
            fi
            
            if ! echo "$PR_BODY" | grep -iE "(test|verified|working|success)" > /dev/null; then
              MISSING+=("‚ö†Ô∏è Should include testing verification")
            fi
            ;;
            
          3)
            # Webhook Deployment System
            echo "ü™ù Validating webhook deployment..."
            REQUIREMENTS+=("‚úì Webhook security configuration (secret)")
            REQUIREMENTS+=("‚úì Systemd service configuration")
            REQUIREMENTS+=("‚úì GitHub Actions workflow update")
            REQUIREMENTS+=("‚úì Deployment testing evidence")
            
            if ! echo "$PR_BODY" | grep -iE "(webhook.*secret|hmac|signature.*verif)" > /dev/null; then
              MISSING+=("‚ùå Must include webhook security (secret/HMAC)")
              VALIDATION_FAILED=true
            fi
            
            if ! echo "$PR_BODY" | grep -iE "(systemd|service|daemon)" > /dev/null; then
              MISSING+=("‚ùå Must configure systemd service")
              VALIDATION_FAILED=true
            fi
            
            if ! echo "$PR_BODY" | grep -iE "(github.*action|workflow|\.github)" > /dev/null; then
              MISSING+=("‚ùå Must update GitHub Actions workflow")
              VALIDATION_FAILED=true
            fi
            
            if ! echo "$PR_BODY" | grep -iE "(deploy.*test|test.*deploy|deployment.*work)" > /dev/null; then
              MISSING+=("‚ùå Must include deployment testing evidence")
              VALIDATION_FAILED=true
            fi
            ;;
            
          4)
            # Install cloudflared on Pi
            echo "üíø Validating cloudflared installation..."
            REQUIREMENTS+=("‚úì Installation commands/script")
            REQUIREMENTS+=("‚úì Service configuration")
            REQUIREMENTS+=("‚úì Version verification")
            
            if ! echo "$PR_BODY" | grep -iE "(install|apt|dpkg|cloudflared)" > /dev/null; then
              MISSING+=("‚ùå Must show installation process")
              VALIDATION_FAILED=true
            fi
            
            if ! echo "$PR_BODY" | grep -iE "(version|cloudflared.*version)" > /dev/null; then
              MISSING+=("‚ö†Ô∏è Should verify installed version")
            fi
            ;;
            
          5)
            # Create CloudFlare tunnel service
            echo "üöá Validating tunnel service creation..."
            REQUIREMENTS+=("‚úì Tunnel creation command")
            REQUIREMENTS+=("‚úì Service configuration file")
            REQUIREMENTS+=("‚úì Tunnel ID/credentials")
            
            if ! echo "$PR_BODY" | grep -iE "(tunnel.*create|cloudflared.*tunnel)" > /dev/null; then
              MISSING+=("‚ùå Must show tunnel creation")
              VALIDATION_FAILED=true
            fi
            
            if ! echo "$PR_BODY" | grep -iE "(config|yml|yaml|ingress)" > /dev/null; then
              MISSING+=("‚ùå Must include tunnel configuration")
              VALIDATION_FAILED=true
            fi
            ;;
            
          6|7)
            # VPN sub-tasks
            echo "üîë Validating VPN sub-task..."
            REQUIREMENTS+=("‚úì UDM Pro configuration steps")
            REQUIREMENTS+=("‚úì Client device setup")
            REQUIREMENTS+=("‚úì Connection testing")
            
            if ! echo "$PR_BODY" | grep -iE "(udm|unifi|vpn.*config)" > /dev/null; then
              MISSING+=("‚ö†Ô∏è Should document UDM Pro configuration")
            fi
            ;;
            
          8|9|10)
            # Webhook sub-tasks
            echo "‚öôÔ∏è Validating webhook sub-task..."
            REQUIREMENTS+=("‚úì Installation/configuration steps")
            REQUIREMENTS+=("‚úì Security implementation")
            REQUIREMENTS+=("‚úì Testing verification")
            
            if ! echo "$PR_BODY" | grep -iE "(webhook|deploy|github.*webhook)" > /dev/null; then
              MISSING+=("‚ùå Must reference webhook implementation")
              VALIDATION_FAILED=true
            fi
            ;;
            
          11)
            # Integration Testing
            echo "üß™ Validating integration testing..."
            REQUIREMENTS+=("‚úì End-to-end test execution")
            REQUIREMENTS+=("‚úì All components verified")
            REQUIREMENTS+=("‚úì Performance metrics")
            REQUIREMENTS+=("‚úì Security validation")
            
            if ! echo "$PR_BODY" | grep -iE "(end.to.end|e2e|integration|full.*test)" > /dev/null; then
              MISSING+=("‚ùå Must include end-to-end testing")
              VALIDATION_FAILED=true
            fi
            
            if ! echo "$PR_BODY" | grep -iE "(performance|latency|response.*time)" > /dev/null; then
              MISSING+=("‚ö†Ô∏è Should include performance metrics")
            fi
            
            if ! echo "$PR_BODY" | grep -iE "(security|vulnerab|scan|pentest)" > /dev/null; then
              MISSING+=("‚ö†Ô∏è Should include security validation")
            fi
            ;;
            
          *)
            echo "‚ÑπÔ∏è No specific validation rules for Issue #${ISSUE_NUM}"
            ;;
        esac
        
        # Generate validation report
        if [ ${#REQUIREMENTS[@]} -gt 0 ] || [ "$VALIDATION_FAILED" = true ]; then
          
          if [ "$VALIDATION_FAILED" = true ]; then
            COMMENT="## üö® Issue-Specific Validation Failed
            
        **Issue #${ISSUE_NUM}** has specific requirements that must be met.
        
        ### Required for this issue:
        $(printf '%s\n' "${REQUIREMENTS[@]}")
        
        ### Missing/Issues found:
        $(printf '%s\n' "${MISSING[@]}")
        
        Please update your PR to address these requirements."
            
            gh pr comment $PR_NUMBER --body "$COMMENT"
            echo "::error::Issue-specific validation failed for Issue #${ISSUE_NUM}"
            exit 1
          else
            COMMENT="## ‚úÖ Issue-Specific Validation Passed
            
        **Issue #${ISSUE_NUM}** requirements verified!
        
        ### Validated requirements:
        $(printf '%s\n' "${REQUIREMENTS[@]}")
        
        $(if [ ${#MISSING[@]} -gt 0 ]; then
          echo "### Suggestions (non-blocking):"
          printf '%s\n' "${MISSING[@]}"
        fi)
        
        PR meets the specific requirements for this issue."
            
            gh pr comment $PR_NUMBER --body "$COMMENT"
            echo "‚úÖ Issue-specific validation passed"
          fi
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}