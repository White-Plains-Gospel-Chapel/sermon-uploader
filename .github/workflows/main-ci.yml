name: Main CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions:
  contents: read

concurrency:
  group: main-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [ssd-host, pi-processor]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies for ${{ matrix.component }}
        run: |
          cd ${{ matrix.component }}
          pip install -e .
          pip install pytest flake8 black isort

      - name: Run linting
        run: |
          cd ${{ matrix.component }}
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check code formatting
        run: |
          cd ${{ matrix.component }}
          black --check .
          isort --check-only .

      - name: Run tests
        run: |
          cd ${{ matrix.component }}
          python -m pytest -v

  docker-build-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [ssd-host, pi-processor]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for ${{ matrix.component }}
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          file: ./${{ matrix.component }}/Dockerfile
          push: false
          tags: sermon-uploader-${{ matrix.component }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install safety
        run: pip install safety

      - name: Check ssd-host dependencies
        run: |
          cd ssd-host
          pip install -e .
          safety check

      - name: Check pi-processor dependencies
        run: |
          cd pi-processor
          pip install -e .
          safety check

  config-validation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Docker Compose files
        run: |
          docker-compose -f docker-compose.mac.yml config
          docker-compose -f docker-compose.pi.yml config

      - name: Check for required environment variables
        run: |
          echo "Checking for required environment variable templates..."
          [ -f .env.example ] || [ -f ssd-host/.env.example ] || [ -f pi-processor/.env.example ] || echo "Consider adding .env.example files"

  all-checks-complete:
    runs-on: ubuntu-latest
    needs: [lint-and-test, docker-build-test, security-check, config-validation]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.lint-and-test.result }}" == "success" && 
                "${{ needs.docker-build-test.result }}" == "success" && 
                "${{ needs.security-check.result }}" == "success" && 
                "${{ needs.config-validation.result }}" == "success" ]]; then
            echo "All CI checks passed!"
            exit 0
          else
            echo "Some CI checks failed"
            exit 1
          fi