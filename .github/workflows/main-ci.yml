name: Main CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

# Cancel in-progress runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: '1.23'
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: 1

jobs:
  # Quick validation checks
  pre-checks:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    outputs:
      has-go: ${{ steps.detect.outputs.has-go }}
      has-node: ${{ steps.detect.outputs.has-node }}
      has-docker: ${{ steps.detect.outputs.has-docker }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Detect changes
        id: detect
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          else
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          fi
          
          echo "has-go=$([[ -n $(echo "$CHANGED_FILES" | grep -E '\.go$|go\.mod|go\.sum|backend/') ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "has-node=$([[ -n $(echo "$CHANGED_FILES" | grep -E 'package.*\.json|\.tsx?$|\.jsx?$|frontend/') ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "has-docker=$([[ -n $(echo "$CHANGED_FILES" | grep -E 'Dockerfile|docker-compose') ]] && echo true || echo false)" >> $GITHUB_OUTPUT

  # Go backend validation and tests
  go-validation:
    name: Go Backend Validation
    needs: pre-checks
    if: needs.pre-checks.outputs.has-go == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: backend/go.sum
      
      - name: Validate Go modules
        working-directory: backend
        run: |
          go mod download
          go mod verify
          go mod tidy
          if [[ -n $(git status --porcelain go.mod go.sum) ]]; then
            echo "::error::go.mod or go.sum needs to be tidied"
            git diff go.mod go.sum
            exit 1
          fi
      
      - name: Run Go tests
        working-directory: backend
        run: |
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html
      
      - name: Upload Go coverage
        uses: actions/upload-artifact@v4
        with:
          name: go-coverage
          path: |
            backend/coverage.out
            backend/coverage.html
          retention-days: 7
      
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: backend
          args: --timeout=5m
        continue-on-error: true

  # Frontend validation and tests
  frontend-validation:
    name: Frontend Validation
    needs: pre-checks
    if: needs.pre-checks.outputs.has-node == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Type checking
        working-directory: frontend
        run: npm run type-check || npx tsc --noEmit
        continue-on-error: true
      
      - name: Lint
        working-directory: frontend
        run: npm run lint || npx eslint .
        continue-on-error: true
      
      - name: Build
        working-directory: frontend
        run: npm run build
      
      - name: Test
        working-directory: frontend
        run: npm test -- --passWithNoTests
        continue-on-error: true

  # Pi processor validation (Python component)
  pi-processor-validation:
    name: Pi Processor Validation
    needs: pre-checks
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Pi processor dependencies
        working-directory: pi-processor
        run: |
          if [[ -f requirements.txt ]]; then
            pip install -r requirements.txt
          fi
          if [[ -f pyproject.toml ]]; then
            pip install -e .
          fi
        continue-on-error: true
      
      - name: Validate Pi processor script
        working-directory: pi-processor
        run: |
          if [[ -f sermon_queue_gui.py ]]; then
            python -m py_compile sermon_queue_gui.py
            echo "✅ Pi processor script compiles successfully"
          fi
        continue-on-error: true

  # Docker build validation
  docker-validation:
    name: Docker Build Validation
    needs: pre-checks
    if: needs.pre-checks.outputs.has-docker == 'true' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build main application image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: sermon-uploader:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
        continue-on-error: true
      
      - name: Build Pi processor image
        uses: docker/build-push-action@v5
        with:
          context: ./pi-processor
          file: ./pi-processor/Dockerfile
          push: false
          tags: sermon-pi-processor:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
        continue-on-error: true

  # Security scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy security scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true
      
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # Summary job
  ci-summary:
    name: CI Summary
    needs: [go-validation, frontend-validation, pi-processor-validation, docker-validation, security-scan]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Check results
        run: |
          echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Go Backend: ${{ needs.go-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: ${{ needs.frontend-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Pi Processor: ${{ needs.pi-processor-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docker: ${{ needs.docker-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          
          # Set overall status
          if [[ "${{ needs.go-validation.result }}" == "success" && "${{ needs.frontend-validation.result }}" == "success" ]]; then
            echo "✅ Core components passed" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "❌ Core components failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi