name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

# Cancel duplicate runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: '1.23'
  NODE_VERSION: '20'

jobs:
  # Stage 1: Test (only if code changed)
  test:
    name: Test
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Notify Discord - Test Started
        run: |
          if [[ -n "${{ secrets.DISCORD_WEBHOOK_ENDPOINT }}" ]]; then
            curl -X POST "${{ secrets.DISCORD_WEBHOOK_ENDPOINT }}" \
              -H "Content-Type: application/json" \
              -H "X-GitHub-Event: workflow_job" \
              -H "X-Hub-Signature: sha1=$(echo -n '{"action":"in_progress","workflow_job":{"name":"Test","status":"in_progress","workflow_name":"CI/CD Pipeline","head_sha":"${{ github.sha }}","head_commit":{"message":"${{ github.event.head_commit.message }}"}}}' | openssl dgst -sha1 -hmac '${{ secrets.GITHUB_WEBHOOK_SECRET }}' | sed 's/^.* //')" \
              -d '{"action":"in_progress","workflow_job":{"name":"Test","status":"in_progress","workflow_name":"CI/CD Pipeline","head_sha":"${{ github.sha }}","head_commit":{"message":"${{ github.event.head_commit.message }}"}}}' || true
          fi
      
      - name: Check what changed
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          fi
      
      # Backend tests
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: backend/go.sum
      
      - name: Test Backend
        working-directory: backend
        run: |
          echo "üîç Verifying Go modules..."
          go mod verify
          
          echo "üß™ Running Go tests with detailed output..."
          go test -v -race -coverprofile=coverage.out ./... 2>&1 | tee test-output.log || {
            echo "‚ùå Tests failed! Last 50 lines of output:"
            tail -50 test-output.log
            exit 1
          }
          
          echo "üìä Test coverage:"
          go tool cover -func=coverage.out | tail -5
          
          echo "üîç Running go vet..."
          go vet ./...
      
      # Frontend tests
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Test Frontend
        working-directory: frontend
        run: |
          echo "üì¶ Installing dependencies..."
          npm ci
          
          echo "üîç TypeScript type checking..."
          npx tsc --noEmit 2>&1 | tee typescript-output.log || {
            echo "‚ùå TypeScript errors found:"
            cat typescript-output.log
            exit 1
          }
          
          echo "üèóÔ∏è Building frontend..."
          npm run build 2>&1 | tee build-output.log || {
            echo "‚ùå Build failed! Last 50 lines:"
            tail -50 build-output.log
            exit 1
          }
          
          echo "‚úÖ Frontend build successful!"
          
      - name: Notify Discord - Test Completed
        if: always()
        run: |
          if [[ -n "${{ secrets.DISCORD_WEBHOOK_ENDPOINT }}" ]]; then
            STATUS="success"
            if [[ "${{ job.status }}" != "success" ]]; then
              STATUS="failure"
            fi
            curl -X POST "${{ secrets.DISCORD_WEBHOOK_ENDPOINT }}" \
              -H "Content-Type: application/json" \
              -H "X-GitHub-Event: workflow_job" \
              -H "X-Hub-Signature: sha1=$(echo -n '{"action":"completed","workflow_job":{"name":"Test","status":"completed","conclusion":"'$STATUS'","workflow_name":"CI/CD Pipeline","head_sha":"${{ github.sha }}","head_commit":{"message":"${{ github.event.head_commit.message }}"}}}' | openssl dgst -sha1 -hmac '${{ secrets.GITHUB_WEBHOOK_SECRET }}' | sed 's/^.* //')" \
              -d '{"action":"completed","workflow_job":{"name":"Test","status":"completed","conclusion":"'$STATUS'","workflow_name":"CI/CD Pipeline","head_sha":"${{ github.sha }}","head_commit":{"message":"${{ github.event.head_commit.message }}"}}}' || true
          fi

  # Stage 2: Build Docker image (only on master)
  build:
    name: Build
    needs: test
    if: github.ref == 'refs/heads/master' && needs.test.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Notify Discord - Build Started
        run: |
          if [[ -n "${{ secrets.DISCORD_WEBHOOK_ENDPOINT }}" ]]; then
            curl -X POST "${{ secrets.DISCORD_WEBHOOK_ENDPOINT }}" \
              -H "Content-Type: application/json" \
              -H "X-GitHub-Event: workflow_job" \
              -H "X-Hub-Signature: sha1=$(echo -n '{"action":"in_progress","workflow_job":{"name":"Build","status":"in_progress","workflow_name":"CI/CD Pipeline","head_sha":"${{ github.sha }}","head_commit":{"message":"${{ github.event.head_commit.message }}"}}}' | openssl dgst -sha1 -hmac '${{ secrets.GITHUB_WEBHOOK_SECRET }}' | sed 's/^.* //')" \
              -d '{"action":"in_progress","workflow_job":{"name":"Build","status":"in_progress","workflow_name":"CI/CD Pipeline","head_sha":"${{ github.sha }}","head_commit":{"message":"${{ github.event.head_commit.message }}"}}}' || true
          fi
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          platforms: linux/arm64
          tags: sermon-uploader:${{ github.sha }}
          build-args: |
            VERSION=1.1.0
            GIT_COMMIT=${{ github.sha }}
            BUILD_TIME=${{ github.event.head_commit.timestamp }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image.tar
      
      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/image.tar
          retention-days: 1
          
      - name: Notify Discord - Build Completed
        if: always()
        run: |
          if [[ -n "${{ secrets.DISCORD_WEBHOOK_ENDPOINT }}" ]]; then
            STATUS="success"
            if [[ "${{ job.status }}" != "success" ]]; then
              STATUS="failure"
            fi
            curl -X POST "${{ secrets.DISCORD_WEBHOOK_ENDPOINT }}" \
              -H "Content-Type: application/json" \
              -H "X-GitHub-Event: workflow_job" \
              -H "X-Hub-Signature: sha1=$(echo -n '{"action":"completed","workflow_job":{"name":"Build","status":"completed","conclusion":"'$STATUS'","workflow_name":"CI/CD Pipeline","head_sha":"${{ github.sha }}","head_commit":{"message":"${{ github.event.head_commit.message }}"}}}' | openssl dgst -sha1 -hmac '${{ secrets.GITHUB_WEBHOOK_SECRET }}' | sed 's/^.* //')" \
              -d '{"action":"completed","workflow_job":{"name":"Build","status":"completed","conclusion":"'$STATUS'","workflow_name":"CI/CD Pipeline","head_sha":"${{ github.sha }}","head_commit":{"message":"${{ github.event.head_commit.message }}"}}}' || true
          fi

  # Stage 3: Deploy to Pi (only after successful build)
  deploy:
    name: Deploy
    needs: build
    runs-on: self-hosted
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Notify Discord - Deploy Started
        run: |
          if [[ -n "${{ secrets.DISCORD_WEBHOOK_ENDPOINT }}" ]]; then
            curl -X POST "${{ secrets.DISCORD_WEBHOOK_ENDPOINT }}" \
              -H "Content-Type: application/json" \
              -H "X-GitHub-Event: workflow_job" \
              -H "X-Hub-Signature: sha1=$(echo -n '{"action":"in_progress","workflow_job":{"name":"Deploy","status":"in_progress","workflow_name":"CI/CD Pipeline","head_sha":"${{ github.sha }}","head_commit":{"message":"${{ github.event.head_commit.message }}"}}}' | openssl dgst -sha1 -hmac '${{ secrets.GITHUB_WEBHOOK_SECRET }}' | sed 's/^.* //')" \
              -d '{"action":"in_progress","workflow_job":{"name":"Deploy","status":"in_progress","workflow_name":"CI/CD Pipeline","head_sha":"${{ github.sha }}","head_commit":{"message":"${{ github.event.head_commit.message }}"}}}' || true
          fi
      
      - name: Download image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp
      
      - name: Load and deploy image
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          # Load the image
          docker load < /tmp/image.tar
          
          # Tag it properly
          docker tag sermon-uploader:${{ github.sha }} sermon-uploader:latest
          
          # Create .env file
          cat > .env << EOL
          MINIO_ENDPOINT=192.168.1.127:9000
          MINIO_ACCESS_KEY=gaius
          MINIO_SECRET_KEY=John 3:16
          MINIO_SECURE=false
          MINIO_BUCKET=sermons
          DISCORD_WEBHOOK_URL=$DISCORD_WEBHOOK_URL
          LARGE_FILE_THRESHOLD_MB=100
          PORT=8000
          EOL
          
          # Stop old container with timeout and force removal
          echo "Stopping old container..."
          docker stop sermon-uploader 2>/dev/null || true
          docker rm -f sermon-uploader 2>/dev/null || true
          
          # Wait a moment for port to be released
          sleep 2
          
          # Kill any process using port 8000 (in case container didn't stop cleanly)
          sudo lsof -ti:8000 | xargs -r sudo kill -9 2>/dev/null || true
          
          # Run new container
          echo "Starting new container..."
          docker run -d \
            --name sermon-uploader \
            --env-file .env \
            -p 8000:8000 \
            --restart unless-stopped \
            sermon-uploader:latest
          
          # Wait for container to be running
          echo "Waiting for container to start..."
          for i in {1..30}; do
            if docker ps | grep -q sermon-uploader; then
              echo "Container is running"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done
          
          # Health check with retries (ARM64 containers take longer to start)
          echo "Checking service health..."
          MAX_RETRIES=30
          RETRY_COUNT=0
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -f http://localhost:8000/api/health 2>/dev/null; then
              echo "‚úÖ Health check passed!"
              break
            fi
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "Health check attempt $RETRY_COUNT/$MAX_RETRIES..."
            sleep 5
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "‚ùå Health check failed after $MAX_RETRIES attempts"
            docker logs sermon-uploader --tail 50
            exit 1
          fi
          
          # Version verification
          echo "Verifying deployed version..."
          VERSION_RESPONSE=$(curl -s http://localhost:8000/api/version)
          DEPLOYED_VERSION=$(echo $VERSION_RESPONSE | grep -o '"version":"[^"]*' | cut -d'"' -f4)
          
          if [ "$DEPLOYED_VERSION" = "1.1.0" ]; then
            echo "‚úÖ Version verified: $DEPLOYED_VERSION"
          else
            echo "‚ö†Ô∏è Version mismatch: Expected 1.1.0, got $DEPLOYED_VERSION"
          fi
          
          echo "‚úÖ Deployment successful!"
          
          # Notify Discord - Deploy Completed
          if [[ -n "${{ secrets.DISCORD_WEBHOOK_ENDPOINT }}" ]]; then
            STATUS="success"
            if [[ "$DEPLOYED_VERSION" != "1.1.0" ]]; then
              STATUS="failure"
            fi
            echo "Sending Discord webhook notification..."
            curl -X POST "${{ secrets.DISCORD_WEBHOOK_ENDPOINT }}" \
              -H "Content-Type: application/json" \
              -H "X-GitHub-Event: workflow_job" \
              -H "X-Hub-Signature: sha1=$(echo -n '{"action":"completed","workflow_job":{"name":"Deploy","status":"completed","conclusion":"'$STATUS'","workflow_name":"CI/CD Pipeline","head_sha":"${{ github.sha }}","head_commit":{"message":"${{ github.event.head_commit.message }}"}}}' | openssl dgst -sha1 -hmac '${{ secrets.GITHUB_WEBHOOK_SECRET }}' | sed 's/^.* //')" \
              -d '{"action":"completed","workflow_job":{"name":"Deploy","status":"completed","conclusion":"'$STATUS'","workflow_name":"CI/CD Pipeline","head_sha":"${{ github.sha }}","head_commit":{"message":"${{ github.event.head_commit.message }}"}}}' || true
          fi
          
          # Cleanup old images
          docker image prune -af --filter="until=24h"