# Optimized CI/CD Pipeline with Enhanced Caching
# Uses buildx caching and optimizations for faster builds

name: Optimized CI/CD Pipeline

on:
  push:
    branches: [main, master, optimize/*]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

# Cancel duplicate runs  
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: '1.23'
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Quick validation on x86
  validate:
    name: Quick Validation
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.check.outputs.should-build }}
    
    steps:
      - uses: actions/checkout@v4
        
      - name: Check if build needed
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "should-build=false" >> $GITHUB_OUTPUT
          else
            echo "should-build=true" >> $GITHUB_OUTPUT  
          fi
      
      # Fast Go validation
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: backend/go.sum
          
      - name: Go Quick Check
        working-directory: backend
        run: |
          go mod verify
          go vet ./...
          
      # Fast Node validation  
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Node Quick Check
        working-directory: frontend
        run: |
          npm ci --prefer-offline
          npx tsc --noEmit

  # Optimized build with caching
  build-arm64:
    name: Optimized ARM64 Build
    needs: validate
    if: needs.validate.outputs.should-build == 'true'
    runs-on: ubuntu-latest  # Standard runner with cross-compilation
    
    strategy:
      max-parallel: 1  # Prevent queue congestion
      matrix:
        approach:
          - { dockerfile: "Dockerfile", tag: "latest" }
    
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      # Optimized build with enhanced caching
      - name: Build with Cache - ${{ matrix.approach.tag }}
        id: build
        run: |
          start_time=$(date +%s)
          
          docker buildx build \
            --file ${{ matrix.approach.dockerfile }} \
            --platform linux/arm64 \
            --tag sermon-uploader:${{ github.sha }} \
            --tag sermon-uploader:latest \
            --build-arg VERSION=1.1.0 \
            --build-arg GIT_COMMIT=${{ github.sha }} \
            --build-arg BUILD_TIME=${{ github.event.head_commit.timestamp }} \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --output type=docker,dest=/tmp/image.tar \
            .
            
          end_time=$(date +%s)
          build_time=$((end_time - start_time))
          
          echo "build_time=${build_time}" >> $GITHUB_OUTPUT
          echo "ðŸš€ Build completed in ${build_time}s" >> $GITHUB_STEP_SUMMARY
          
          # Get image size
          image_size=$(du -h /tmp/image.tar | cut -f1)
          echo "image_size=${image_size}" >> $GITHUB_OUTPUT
          
      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-optimized
          path: /tmp/image.tar
          retention-days: 1
          
      - name: Build Summary
        run: |
          echo "### ðŸ“Š Build Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Time:** ${{ steps.build.outputs.build_time }}s" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Size:** ${{ steps.build.outputs.image_size }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cache Used:** GitHub Actions cache" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  # Deploy to Pi 5
  deploy:
    name: Deploy to Production
    needs: build-arm64
    runs-on: self-hosted
    environment: production
    if: github.ref == 'refs/heads/master'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download image
        uses: actions/download-artifact@v4
        with:
          name: docker-image-optimized
          path: /tmp
          
      - name: Deploy to Pi 5
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          echo "ðŸš€ Deploying to Pi 5..."
          
          # Load the image from artifact
          docker load < /tmp/image.tar
          
          # Tag for deployment (image already has the correct name from build)
          docker tag sermon-uploader:${{ github.sha }} sermon-uploader:latest || \
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} sermon-uploader:latest
          
          # Create optimized .env  
          cat > .env << EOL
          MINIO_ENDPOINT=192.168.1.127:9000
          MINIO_ACCESS_KEY=gaius
          MINIO_SECRET_KEY=John 3:16
          MINIO_SECURE=false
          MINIO_BUCKET=sermons
          DISCORD_WEBHOOK_URL=$DISCORD_WEBHOOK_URL
          LARGE_FILE_THRESHOLD_MB=100
          PORT=8000
          EOL
          
          # Fast deployment with minimal downtime
          echo "ðŸš€ Deploying optimized container..."
          docker stop sermon-uploader 2>/dev/null || true
          docker rm sermon-uploader 2>/dev/null || true
          
          # Start with optimized settings for Pi 5
          docker run -d \
            --name sermon-uploader \
            --env-file .env \
            -p 8000:8000 \
            --memory=500m \
            --cpus=2 \
            --restart unless-stopped \
            sermon-uploader:latest
            
          # Quick health check
          timeout 30 bash -c 'until curl -f http://localhost:8000/api/health >/dev/null 2>&1; do sleep 1; done'
          
          echo "âœ… Optimized deployment successful!"
          
          # Cleanup old images
          docker image prune -af --filter="until=24h"