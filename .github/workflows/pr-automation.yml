name: PR Automation and Protection

on:
  issues:
    types: [assigned, labeled]
  pull_request:
    types: [opened, synchronize, closed]
  pull_request_review:
    types: [submitted]

jobs:
  create-feature-branch:
    if: github.event.action == 'assigned' || (github.event.action == 'labeled' && contains(github.event.label.name, 'ready-for-implementation'))
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Create feature branch for issue
      run: |
        ISSUE_NUMBER=${{ github.event.issue.number }}
        ISSUE_TITLE="${{ github.event.issue.title }}"
        
        # Sanitize title for branch name
        BRANCH_NAME="issue-${ISSUE_NUMBER}-$(echo "$ISSUE_TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/-$//')"
        
        echo "Creating branch: $BRANCH_NAME"
        
        # Create and push branch
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git checkout -b "$BRANCH_NAME"
        
        # Create initial commit with issue template
        mkdir -p ".issue-tracking"
        cat > ".issue-tracking/issue-${ISSUE_NUMBER}.md" << EOF
        # Issue #${ISSUE_NUMBER}: ${{ github.event.issue.title }}
        
        **Status**: Implementation in progress
        **Assignee**: ${{ github.event.issue.assignee.login }}
        **Labels**: ${{ join(github.event.issue.labels.*.name, ', ') }}
        
        ## Implementation Checklist:
        - [ ] Code changes completed
        - [ ] Local testing passed
        - [ ] Ready for PR review
        - [ ] Claude Code verification requested
        
        ## Review Process:
        1. Create PR when implementation complete
        2. Request @claude-code review in PR
        3. Address any review comments
        4. Get approval before merge
        
        **Related Issue**: Closes #${ISSUE_NUMBER}
        EOF
        
        git add ".issue-tracking/issue-${ISSUE_NUMBER}.md"
        git commit -m "Create feature branch for issue #${ISSUE_NUMBER}

        - ${{ github.event.issue.title }}
        - Branch: $BRANCH_NAME
        - Auto-created for implementation tracking
        
        Related: #${ISSUE_NUMBER}"
        
        git push origin "$BRANCH_NAME"
        
        # Comment on issue with branch info
        gh issue comment ${{ github.event.issue.number }} --body "üåø **FEATURE BRANCH CREATED**
        
        **Branch**: \`$BRANCH_NAME\`
        **Next Steps**:
        1. Switch to feature branch: \`git checkout $BRANCH_NAME\`
        2. Implement the task requirements  
        3. Test your changes locally
        4. Push commits: \`git push origin $BRANCH_NAME\`
        5. Create PR when ready: \`gh pr create\`
        
        **Protection**: Direct pushes to \`master\` are discouraged. Use this feature branch ‚Üí PR ‚Üí review ‚Üí merge workflow.
        
        ‚ö†Ô∏è **Remember**: No PR will be merged without @claude-code review and approval!"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pr-validation:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Detect PR type and validate
      run: |
        PR_NUMBER=${{ github.event.pull_request.number }}
        PR_BODY="${{ github.event.pull_request.body }}"
        PR_TITLE="${{ github.event.pull_request.title }}"
        BASE_SHA="${{ github.event.pull_request.base.sha }}"
        HEAD_SHA="${{ github.event.pull_request.head.sha }}"
        
        echo "üîç Analyzing PR #${PR_NUMBER}..."
        
        # Detect PR type based on changed files
        CHANGED_FILES=$(git diff --name-only $BASE_SHA..$HEAD_SHA 2>/dev/null || echo "")
        
        # Initialize PR type detection
        HAS_CODE=false
        HAS_DOCS=false
        HAS_CONFIG=false
        HAS_INFRA=false
        
        # Analyze changed files
        while IFS= read -r file; do
          if [[ "$file" =~ \.(go|js|ts|tsx|jsx|py|java|c|cpp|rs)$ ]]; then
            HAS_CODE=true
          elif [[ "$file" =~ \.(md|txt|rst)$ ]] || [[ "$file" =~ ^docs/ ]]; then
            HAS_DOCS=true
          elif [[ "$file" =~ \.(yml|yaml|json|toml|ini|conf)$ ]] || [[ "$file" =~ ^\.github/ ]]; then
            HAS_CONFIG=true
          elif [[ "$file" =~ (Dockerfile|docker-compose|\.sh$|Makefile) ]]; then
            HAS_INFRA=true
          fi
        done <<< "$CHANGED_FILES"
        
        # Determine primary PR type
        if [ "$HAS_CODE" = true ]; then
          PR_TYPE="üîß Code Change"
          VALIDATION_TYPE="code"
        elif [ "$HAS_INFRA" = true ]; then
          PR_TYPE="üèóÔ∏è Infrastructure/Build"
          VALIDATION_TYPE="infra"
        elif [ "$HAS_CONFIG" = true ]; then
          PR_TYPE="‚öôÔ∏è Configuration"
          VALIDATION_TYPE="config"
        elif [ "$HAS_DOCS" = true ]; then
          PR_TYPE="üìö Documentation"
          VALIDATION_TYPE="docs"
        else
          PR_TYPE="üîÑ Other"
          VALIDATION_TYPE="other"
        fi
        
        echo "Detected PR Type: $PR_TYPE"
        
        # Common validation
        VALIDATION_FAILED=false
        ISSUES=()
        
        # All PRs must reference an issue
        if ! echo "$PR_BODY" | grep -iE "(closes?|fixes?|resolves?) #[0-9]+" > /dev/null; then
          ISSUES+=("‚ùå PR must reference an issue (e.g., 'Closes #123')")
          VALIDATION_FAILED=true
        fi
        
        # Type-specific validation
        case "$VALIDATION_TYPE" in
          code)
            # Code changes need testing evidence
            if ! echo "$PR_BODY" | grep -iE "(test|tested|testing|verify|verified)" > /dev/null; then
              ISSUES+=("‚ùå Code changes must include testing evidence")
              VALIDATION_FAILED=true
            fi
            if ! echo "$PR_BODY" | grep -iE "## (changes|implementation)" > /dev/null; then
              ISSUES+=("‚ö†Ô∏è Should describe implementation details")
            fi
            ;;
          
          docs)
            # Documentation changes are more lenient
            if ! echo "$PR_BODY" | grep -iE "(document|update|clarify|explain|describe)" > /dev/null; then
              ISSUES+=("‚ö†Ô∏è Should describe documentation changes")
            fi
            ;;
          
          config)
            # Configuration changes need rationale
            if ! echo "$PR_BODY" | grep -iE "(configure|setup|setting|enable|disable)" > /dev/null; then
              ISSUES+=("‚ö†Ô∏è Should explain configuration changes")
            fi
            ;;
          
          infra)
            # Infrastructure changes need impact assessment
            if ! echo "$PR_BODY" | grep -iE "(deploy|build|infrastructure|docker|ci/cd)" > /dev/null; then
              ISSUES+=("‚ö†Ô∏è Should describe infrastructure impact")
            fi
            ;;
        esac
        
        # Check for reviewer request (warning only for non-code)
        if ! echo "$PR_BODY" | grep -i "claude-code\|@greastern" > /dev/null; then
          if [ "$VALIDATION_TYPE" = "code" ]; then
            ISSUES+=("‚ùå Code PRs must request @claude-code or @greastern review")
            VALIDATION_FAILED=true
          else
            ISSUES+=("‚ö†Ô∏è Consider requesting review from @claude-code or @greastern")
          fi
        fi
        
        if [ "$VALIDATION_FAILED" = true ]; then
          echo "::error::PR validation failed"
          
          # Comment with issues
          COMMENT="üö® **PR VALIDATION FAILED**
        
          **PR Type Detected**: $PR_TYPE
          
          The following issues were found:
          $(printf '%s\n' "${ISSUES[@]}")
          
          **Requirements for $PR_TYPE**:
          - Must reference issue: \`Closes #123\`"
          
          case "$VALIDATION_TYPE" in
            code)
              COMMENT="$COMMENT
          - Must include testing evidence
          - Must request code review
          - Should describe implementation"
              ;;
            docs)
              COMMENT="$COMMENT
          - Should describe what was documented
          - Review is optional but recommended"
              ;;
            config)
              COMMENT="$COMMENT
          - Should explain configuration rationale
          - Should describe impact"
              ;;
            infra)
              COMMENT="$COMMENT
          - Should describe infrastructure changes
          - Should assess deployment impact"
              ;;
          esac
          
          COMMENT="$COMMENT
          
          Please update the PR description to address these issues."
          
          gh pr comment $PR_NUMBER --body "$COMMENT"
          exit 1
        else
          echo "‚úÖ PR validation passed"
          
          # Add success comment with type-specific info
          COMMENT="‚úÖ **PR VALIDATION PASSED**
          
          **PR Type**: $PR_TYPE
          **Validation Level**: "
          
          case "$VALIDATION_TYPE" in
            code)
              COMMENT="${COMMENT}Full code review required"
              ;;
            docs)
              COMMENT="${COMMENT}Documentation review (expedited)"
              ;;
            config)
              COMMENT="${COMMENT}Configuration review"
              ;;
            infra)
              COMMENT="${COMMENT}Infrastructure review"
              ;;
            *)
              COMMENT="${COMMENT}Standard review"
              ;;
          esac
          
          COMMENT="$COMMENT
          
          PR meets requirements for $PR_TYPE. Awaiting review.
          
          **Next Steps**:
          1. Reviewer will assess changes
          2. Address any feedback
          3. Get approval before merge
          4. Merge will auto-close related issue"
          
          gh pr comment $PR_NUMBER --body "$COMMENT"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  check-review-status:
    if: github.event.action == 'submitted' && github.event.review.state == 'approved'
    runs-on: ubuntu-latest
    steps:
    - name: Check if PR can be merged
      run: |
        PR_NUMBER=${{ github.event.pull_request.number }}
        REVIEWER="${{ github.event.review.user.login }}"
        
        echo "‚úÖ PR #${PR_NUMBER} approved by ${REVIEWER}"
        
        # Check if this was Claude Code approval (via your account)
        if [ "$REVIEWER" = "greastern" ]; then
          echo "üìù Adding merge instructions"
          
          gh pr comment $PR_NUMBER --body "üéâ **APPROVED FOR MERGE**
          
          ‚úÖ Code review completed by @claude-code (via @greastern)
          ‚úÖ All checks passed
          ‚úÖ Ready for merge
          
          **To merge**:
          - Use 'Squash and merge' to keep history clean
          - Will automatically close related issue
          - Will trigger deployment if on master branch
          
          üöÄ Safe to merge when ready!"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  auto-close-issue:
    if: github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
    - name: Close related issue and update tracking
      run: |
        PR_NUMBER=${{ github.event.pull_request.number }}
        PR_BODY="${{ github.event.pull_request.body }}"
        
        # Extract issue number from PR body
        ISSUE_NUM=$(echo "$PR_BODY" | grep -oiE "(closes?|fixes?|resolves?) #([0-9]+)" | grep -oE "[0-9]+" | head -1)
        
        if [ -n "$ISSUE_NUM" ]; then
          echo "üîó PR merged, closing issue #${ISSUE_NUM}"
          
          gh issue comment $ISSUE_NUM --body "‚úÖ **AUTOMATICALLY CLOSED**
          
          **Merged PR**: #${PR_NUMBER}
          **Implementation**: Completed and merged to master
          **Status**: Task verified and complete
          
          This issue was closed automatically when PR #${PR_NUMBER} was merged.
          
          üéâ Task successfully implemented with proper review process!"
          
          gh issue close $ISSUE_NUM
        else
          echo "‚ö†Ô∏è No issue number found in PR body"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}