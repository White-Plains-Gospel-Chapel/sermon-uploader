name: Automated Rollback

on:
  workflow_dispatch:
    inputs:
      rollback_type:
        description: 'Type of rollback to perform'
        required: true
        default: 'previous_version'
        type: choice
        options:
          - 'previous_version'
          - 'specific_commit'
          - 'emergency_stop'
      target_commit:
        description: 'Target commit SHA (for specific_commit rollback)'
        required: false
        type: string
      reason:
        description: 'Reason for rollback'
        required: true
        type: string
      force_rollback:
        description: 'Force rollback without health checks'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Validate rollback parameters and check system status
  validate-rollback:
    name: Validate Rollback Request
    runs-on: ubuntu-latest
    outputs:
      target_image: ${{ steps.determine-target.outputs.target_image }}
      current_status: ${{ steps.health-check.outputs.current_status }}
      rollback_approved: ${{ steps.validate.outputs.approved }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 100  # Fetch enough history for rollback options
      
      - name: Determine target image
        id: determine-target
        run: |
          ROLLBACK_TYPE="${{ github.event.inputs.rollback_type }}"
          TARGET_COMMIT="${{ github.event.inputs.target_commit }}"
          
          if [[ "$ROLLBACK_TYPE" == "previous_version" ]]; then
            # Find the previous successful deployment
            PREVIOUS_COMMIT=$(git log --format="%H" --grep="üöÄ Deployment" -1 --skip=1 HEAD)
            if [[ -z "$PREVIOUS_COMMIT" ]]; then
              PREVIOUS_COMMIT=$(git rev-parse HEAD~1)
            fi
            TARGET_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$PREVIOUS_COMMIT"
            echo "Rolling back to previous version: $PREVIOUS_COMMIT"
          elif [[ "$ROLLBACK_TYPE" == "specific_commit" ]]; then
            if [[ -z "$TARGET_COMMIT" ]]; then
              echo "‚ùå Target commit required for specific_commit rollback"
              exit 1
            fi
            # Validate commit exists
            if ! git cat-file -e "$TARGET_COMMIT" 2>/dev/null; then
              echo "‚ùå Target commit $TARGET_COMMIT does not exist"
              exit 1
            fi
            TARGET_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TARGET_COMMIT"
            echo "Rolling back to specific commit: $TARGET_COMMIT"
          elif [[ "$ROLLBACK_TYPE" == "emergency_stop" ]]; then
            TARGET_IMAGE="none"
            echo "Emergency stop requested - will stop all services"
          else
            echo "‚ùå Invalid rollback type: $ROLLBACK_TYPE"
            exit 1
          fi
          
          echo "target_image=$TARGET_IMAGE" >> $GITHUB_OUTPUT
          echo "üéØ Target image: $TARGET_IMAGE"
      
      - name: Check current system health
        id: health-check
        run: |
          PI_HOST="${{ secrets.PI_HOST }}"
          PI_USER="${{ secrets.PI_USER }}"
          PORT="${{ secrets.PORT || '8000' }}"
          
          echo "üîç Checking current system health..."
          
          # Try to get system status via SSH
          HEALTH_STATUS="unknown"
          if ping -c 1 -W 3 "$PI_HOST" >/dev/null 2>&1; then
            echo "‚úÖ Pi is reachable"
            
            # Check if services are running
            if timeout 10 nc -z "$PI_HOST" "$PORT" >/dev/null 2>&1; then
              echo "‚úÖ Main service port accessible"
              HEALTH_STATUS="accessible"
            else
              echo "‚ùå Main service port not accessible"
              HEALTH_STATUS="service_down"
            fi
          else
            echo "‚ùå Pi is not reachable"
            HEALTH_STATUS="unreachable"
          fi
          
          echo "current_status=$HEALTH_STATUS" >> $GITHUB_OUTPUT
          echo "üìä Current system status: $HEALTH_STATUS"
      
      - name: Validate rollback decision
        id: validate
        run: |
          ROLLBACK_TYPE="${{ github.event.inputs.rollback_type }}"
          FORCE_ROLLBACK="${{ github.event.inputs.force_rollback }}"
          CURRENT_STATUS="${{ steps.health-check.outputs.current_status }}"
          REASON="${{ github.event.inputs.reason }}"
          
          echo "üìã Rollback validation:"
          echo "  Type: $ROLLBACK_TYPE"
          echo "  Force: $FORCE_ROLLBACK"
          echo "  Current Status: $CURRENT_STATUS"
          echo "  Reason: $REASON"
          
          # Validate rollback is necessary unless forced
          APPROVED="false"
          if [[ "$FORCE_ROLLBACK" == "true" ]]; then
            echo "‚ö†Ô∏è Forced rollback approved"
            APPROVED="true"
          elif [[ "$CURRENT_STATUS" == "service_down" || "$CURRENT_STATUS" == "unreachable" ]]; then
            echo "‚úÖ Rollback approved - system is unhealthy"
            APPROVED="true"
          elif [[ "$ROLLBACK_TYPE" == "emergency_stop" ]]; then
            echo "üö® Emergency stop approved"
            APPROVED="true"
          elif [[ "$CURRENT_STATUS" == "accessible" ]]; then
            echo "‚ö†Ô∏è System appears healthy - rollback requires force flag"
            echo "üí° Use force_rollback=true if rollback is still needed"
            APPROVED="false"
          else
            echo "‚úÖ Rollback approved based on system status"
            APPROVED="true"
          fi
          
          echo "approved=$APPROVED" >> $GITHUB_OUTPUT
          
          if [[ "$APPROVED" != "true" ]]; then
            echo "‚ùå Rollback not approved - see validation results above"
            exit 1
          fi

  # Execute the rollback
  execute-rollback:
    name: Execute Rollback
    needs: validate-rollback
    runs-on: self-hosted
    if: needs.validate-rollback.outputs.rollback_approved == 'true'
    
    steps:
      - name: Create rollback script
        run: |
          cat > rollback-script.sh << 'EOF'
          #!/bin/bash
          set -e
          
          ROLLBACK_TYPE="${{ github.event.inputs.rollback_type }}"
          TARGET_IMAGE="${{ needs.validate-rollback.outputs.target_image }}"
          REASON="${{ github.event.inputs.reason }}"
          CURRENT_STATUS="${{ needs.validate-rollback.outputs.current_status }}"
          
          echo "üîÑ Starting rollback process..."
          echo "  Type: $ROLLBACK_TYPE"
          echo "  Target: $TARGET_IMAGE"
          echo "  Reason: $REASON"
          echo "  Current Status: $CURRENT_STATUS"
          
          # Navigate to project directory
          cd /opt/sermon-uploader || { echo "‚ùå Project directory not found"; exit 1; }
          
          # Create rollback backup of current state
          BACKUP_DIR="/opt/sermon-uploader-backups/rollback-$(date +%Y%m%d-%H%M%S)"
          mkdir -p "$BACKUP_DIR"
          
          echo "üíæ Creating backup of current state..."
          cp -r .env docker-compose.single.yml "$BACKUP_DIR/" 2>/dev/null || true
          docker compose -f docker-compose.single.yml ps > "$BACKUP_DIR/container_status.txt" || true
          docker images | grep sermon-uploader > "$BACKUP_DIR/current_images.txt" || true
          
          if [[ "$ROLLBACK_TYPE" == "emergency_stop" ]]; then
            echo "üö® EMERGENCY STOP - Stopping all services"
            
            docker compose -f docker-compose.single.yml down || true
            docker compose -f docker-compose.prod.yml down || true
            
            # Kill any remaining processes
            pkill -f "sermon-uploader" || true
            pkill -f "minio" || true
            
            echo "üõë All services stopped"
            echo "üìç Backup created at: $BACKUP_DIR"
            echo "üîß To restart, use: docker compose -f docker-compose.single.yml up -d"
            
            exit 0
          fi
          
          # Standard rollback process
          echo "‚è¨ Stopping current services gracefully..."
          docker compose -f docker-compose.single.yml stop sermon-uploader || true
          
          # Wait for graceful shutdown
          sleep 10
          
          echo "üì¶ Pulling target image: $TARGET_IMAGE"
          if [[ "$TARGET_IMAGE" != "none" ]]; then
            # Update image reference in compose file
            sed -i.bak "s|image: ghcr.io/.*|image: $TARGET_IMAGE|g" docker-compose.single.yml
            
            # Pull the target image
            docker pull "$TARGET_IMAGE" || {
              echo "‚ùå Failed to pull target image: $TARGET_IMAGE"
              echo "üìã Available images:"
              docker images | grep sermon-uploader
              exit 1
            }
          fi
          
          # Start with rolled-back image
          echo "üöÄ Starting services with rolled-back image..."
          docker compose -f docker-compose.single.yml up -d
          
          # Wait for MinIO to be ready
          echo "‚è≥ Waiting for MinIO to start..."
          for i in {1..12}; do
            if curl -f http://localhost:9000/minio/health/live >/dev/null 2>&1; then
              echo "‚úÖ MinIO is ready (attempt $i)"
              break
            elif [ $i -eq 12 ]; then
              echo "‚ùå MinIO failed to start after 2 minutes"
              echo "üìù Container logs:"
              docker compose -f docker-compose.single.yml logs sermon-uploader --tail=30
              exit 1
            else
              echo "‚è≥ MinIO not ready, retrying in 10s... (attempt $i)"
              sleep 10
            fi
          done
          
          # Wait for main service
          echo "‚è≥ Waiting for main service..."
          sleep 20
          
          # Health check
          PORT_TO_USE=8000
          echo "üîç Performing post-rollback health check..."
          for i in {1..10}; do
            if curl -f http://localhost:$PORT_TO_USE/api/health >/dev/null 2>&1; then
              echo "‚úÖ Rollback successful - Health check passed (attempt $i)"
              break
            elif [ $i -eq 10 ]; then
              echo "‚ùå Rollback failed - Health check failed after 10 attempts"
              echo "üìù Post-rollback logs:"
              docker compose -f docker-compose.single.yml logs sermon-uploader --tail=50
              
              echo "üîÑ Attempting to restore from backup..."
              cp "$BACKUP_DIR/.env" . 2>/dev/null || true
              cp "$BACKUP_DIR/docker-compose.single.yml" . 2>/dev/null || true
              docker compose -f docker-compose.single.yml up -d --force-recreate
              
              exit 1
            else
              echo "‚è≥ Health check failed, retrying in 15s... (attempt $i)"
              sleep 15
            fi
          done
          
          echo "üéâ Rollback completed successfully!"
          echo "üìç Backup of previous state: $BACKUP_DIR"
          echo "üìä Current status:"
          docker compose -f docker-compose.single.yml ps
          
          EOF
          
          chmod +x rollback-script.sh
      
      - name: Execute rollback on Pi
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PI_HOST }}
          username: ${{ secrets.PI_USER }}
          key: ${{ secrets.PI_SSH_KEY }}
          port: ${{ secrets.PI_PORT || 22 }}
          script_stop: true
          timeout: 20m
          command_timeout: 20m
          script: |
            bash -c "$(cat << 'ROLLBACK_SCRIPT_END'
            #!/bin/bash
            set -e
            
            ROLLBACK_TYPE="${{ github.event.inputs.rollback_type }}"
            TARGET_IMAGE="${{ needs.validate-rollback.outputs.target_image }}"
            REASON="${{ github.event.inputs.reason }}"
            CURRENT_STATUS="${{ needs.validate-rollback.outputs.current_status }}"
            
            echo "üîÑ Starting rollback process..."
            echo "  Type: $ROLLBACK_TYPE"
            echo "  Target: $TARGET_IMAGE"
            echo "  Reason: $REASON"
            echo "  Current Status: $CURRENT_STATUS"
            
            # Navigate to project directory
            cd /opt/sermon-uploader || { echo "‚ùå Project directory not found"; exit 1; }
            
            # Create rollback backup of current state
            BACKUP_DIR="/opt/sermon-uploader-backups/rollback-$(date +%Y%m%d-%H%M%S)"
            mkdir -p "$BACKUP_DIR"
            
            echo "üíæ Creating backup of current state..."
            cp -r .env docker-compose.single.yml "$BACKUP_DIR/" 2>/dev/null || true
            docker compose -f docker-compose.single.yml ps > "$BACKUP_DIR/container_status.txt" || true
            docker images | grep sermon-uploader > "$BACKUP_DIR/current_images.txt" || true
            
            if [[ "$ROLLBACK_TYPE" == "emergency_stop" ]]; then
              echo "üö® EMERGENCY STOP - Stopping all services"
              
              docker compose -f docker-compose.single.yml down || true
              docker compose -f docker-compose.prod.yml down || true
              
              # Kill any remaining processes
              pkill -f "sermon-uploader" || true
              pkill -f "minio" || true
              
              echo "üõë All services stopped"
              echo "üìç Backup created at: $BACKUP_DIR"
              echo "üîß To restart, use: docker compose -f docker-compose.single.yml up -d"
              
              exit 0
            fi
            
            # Standard rollback process
            echo "‚è¨ Stopping current services gracefully..."
            docker compose -f docker-compose.single.yml stop sermon-uploader || true
            
            # Wait for graceful shutdown
            sleep 10
            
            echo "üì¶ Pulling target image: $TARGET_IMAGE"
            if [[ "$TARGET_IMAGE" != "none" ]]; then
              # Update image reference in compose file
              sed -i.bak "s|image: ghcr.io/.*|image: $TARGET_IMAGE|g" docker-compose.single.yml
              
              # Pull the target image
              docker pull "$TARGET_IMAGE" || {
                echo "‚ùå Failed to pull target image: $TARGET_IMAGE"
                echo "üìã Available images:"
                docker images | grep sermon-uploader
                exit 1
              }
            fi
            
            # Start with rolled-back image
            echo "üöÄ Starting services with rolled-back image..."
            docker compose -f docker-compose.single.yml up -d
            
            # Wait for MinIO to be ready
            echo "‚è≥ Waiting for MinIO to start..."
            for i in {1..12}; do
              if curl -f http://localhost:9000/minio/health/live >/dev/null 2>&1; then
                echo "‚úÖ MinIO is ready (attempt $i)"
                break
              elif [ $i -eq 12 ]; then
                echo "‚ùå MinIO failed to start after 2 minutes"
                echo "üìù Container logs:"
                docker compose -f docker-compose.single.yml logs sermon-uploader --tail=30
                exit 1
              else
                echo "‚è≥ MinIO not ready, retrying in 10s... (attempt $i)"
                sleep 10
              fi
            done
            
            # Wait for main service
            echo "‚è≥ Waiting for main service..."
            sleep 20
            
            # Health check
            PORT_TO_USE=8000
            echo "üîç Performing post-rollback health check..."
            for i in {1..10}; do
              if curl -f http://localhost:$PORT_TO_USE/api/health >/dev/null 2>&1; then
                echo "‚úÖ Rollback successful - Health check passed (attempt $i)"
                break
              elif [ $i -eq 10 ]; then
                echo "‚ùå Rollback failed - Health check failed after 10 attempts"
                echo "üìù Post-rollback logs:"
                docker compose -f docker-compose.single.yml logs sermon-uploader --tail=50
                
                echo "üîÑ Attempting to restore from backup..."
                cp "$BACKUP_DIR/.env" . 2>/dev/null || true
                cp "$BACKUP_DIR/docker-compose.single.yml" . 2>/dev/null || true
                docker compose -f docker-compose.single.yml up -d --force-recreate
                
                exit 1
              else
                echo "‚è≥ Health check failed, retrying in 15s... (attempt $i)"
                sleep 15
              fi
            done
            
            echo "üéâ Rollback completed successfully!"
            echo "üìç Backup of previous state: $BACKUP_DIR"
            echo "üìä Current status:"
            docker compose -f docker-compose.single.yml ps
            
            ROLLBACK_SCRIPT_END
            )"

  # Send notifications about rollback
  notify-rollback:
    name: Notify Rollback Status
    needs: [validate-rollback, execute-rollback]
    runs-on: ubuntu-latest
    if: always() && needs.validate-rollback.outputs.rollback_approved == 'true'
    
    steps:
      - name: Notify Discord of rollback status
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          ROLLBACK_STATUS="${{ needs.execute-rollback.result }}"
          ROLLBACK_TYPE="${{ github.event.inputs.rollback_type }}"
          REASON="${{ github.event.inputs.reason }}"
          TARGET_IMAGE="${{ needs.validate-rollback.outputs.target_image }}"
          
          if [ "$ROLLBACK_STATUS" = "success" ]; then
            COLOR="16776960"  # Yellow/Orange for rollback
            TITLE="üîÑ Rollback Successful"
            DESCRIPTION="System successfully rolled back"
            STATUS_EMOJI="‚úÖ"
          else
            COLOR="16711680"  # Red
            TITLE="‚ùå Rollback Failed"
            DESCRIPTION="Rollback encountered errors - manual intervention required"
            STATUS_EMOJI="‚ùå"
          fi
          
          if [ -n "$DISCORD_WEBHOOK" ]; then
            curl -X POST "$DISCORD_WEBHOOK" \
              -H "Content-Type: application/json" \
              -d "{
                \"embeds\": [{
                  \"title\": \"$TITLE\",
                  \"description\": \"$DESCRIPTION\",
                  \"color\": $COLOR,
                  \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\",
                  \"fields\": [
                    {\"name\": \"Rollback Type\", \"value\": \"$ROLLBACK_TYPE\", \"inline\": true},
                    {\"name\": \"Status\", \"value\": \"$STATUS_EMOJI $ROLLBACK_STATUS\", \"inline\": true},
                    {\"name\": \"Target Image\", \"value\": \"$TARGET_IMAGE\", \"inline\": false},
                    {\"name\": \"Reason\", \"value\": \"$REASON\", \"inline\": false},
                    {\"name\": \"Repository\", \"value\": \"${{ github.repository }}\", \"inline\": true},
                    {\"name\": \"Triggered By\", \"value\": \"${{ github.actor }}\", \"inline\": true}
                  ],
                  \"footer\": {
                    \"text\": \"Automated Rollback System\"
                  }
                }]
              }"
          fi