name: Runner Optimization and Maintenance

# This workflow optimizes self-hosted runner performance and maintains runner health
# Runs on a schedule to clean up resources and optimize for Pi hardware limitations

on:
  schedule:
    # Run daily at 2 AM UTC (low activity period)
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      deep_clean:
        description: 'Perform deep cleanup (removes all cached data)'
        required: false
        default: 'false'
        type: boolean
      optimize_memory:
        description: 'Optimize memory usage (may restart services)'
        required: false
        default: 'false'
        type: boolean

env:
  # Resource limits for Pi deployment
  MAX_MEMORY_USAGE_MB: 1024  # 1GB memory limit
  MAX_DISK_USAGE_GB: 8       # 8GB disk space limit for CI artifacts
  DOCKER_PRUNE_DAYS: 3       # Keep Docker resources for 3 days

jobs:
  # ==============================================================================
  # RUNNER HEALTH CHECK AND OPTIMIZATION
  # ==============================================================================
  
  runner-health-check:
    name: "🏃 Runner Health Check"
    runs-on: self-hosted
    if: github.repository_owner == 'White-Plains-Gospel-Chapel'  # Only run on our Pi
    outputs:
      memory-usage: ${{ steps.health.outputs.memory-usage }}
      disk-usage: ${{ steps.health.outputs.disk-usage }}
      docker-usage: ${{ steps.health.outputs.docker-usage }}
      optimization-needed: ${{ steps.health.outputs.optimization-needed }}
    steps:
      - name: Comprehensive system health check
        id: health
        run: |
          echo "🏥 Checking Raspberry Pi system health..."
          
          # Memory usage check
          MEMORY_USED=$(free -m | awk 'NR==2{printf "%.0f", $3}')
          MEMORY_TOTAL=$(free -m | awk 'NR==2{printf "%.0f", $2}')
          MEMORY_PERCENT=$(( MEMORY_USED * 100 / MEMORY_TOTAL ))
          
          echo "Memory: ${MEMORY_USED}MB / ${MEMORY_TOTAL}MB (${MEMORY_PERCENT}%)"
          echo "memory-usage=$MEMORY_USED" >> $GITHUB_OUTPUT
          
          # Disk usage check
          DISK_USED_GB=$(df /opt --output=used | tail -n1 | awk '{print int($1/1024/1024)}')
          DISK_TOTAL_GB=$(df /opt --output=size | tail -n1 | awk '{print int($1/1024/1024)}')
          DISK_PERCENT=$(( DISK_USED_GB * 100 / DISK_TOTAL_GB ))
          
          echo "Disk: ${DISK_USED_GB}GB / ${DISK_TOTAL_GB}GB (${DISK_PERCENT}%)"
          echo "disk-usage=$DISK_USED_GB" >> $GITHUB_OUTPUT
          
          # Docker resource usage
          DOCKER_SIZE_GB=0
          if command -v docker >/dev/null; then
            DOCKER_SIZE_KB=$(docker system df --format "table {{.Size}}" | tail -n +2 | sed 's/[^0-9.]//g' | awk '{sum+=$1} END {print sum*1024}')
            DOCKER_SIZE_GB=$(echo "$DOCKER_SIZE_KB / 1024 / 1024" | bc -l | xargs printf "%.0f\n")
          fi
          echo "Docker usage: ${DOCKER_SIZE_GB}GB"
          echo "docker-usage=$DOCKER_SIZE_GB" >> $GITHUB_OUTPUT
          
          # Determine if optimization is needed
          OPTIMIZATION_NEEDED=false
          REASONS=""
          
          if (( MEMORY_PERCENT > 80 )); then
            OPTIMIZATION_NEEDED=true
            REASONS="$REASONS memory-high"
          fi
          
          if (( DISK_PERCENT > 90 )); then
            OPTIMIZATION_NEEDED=true
            REASONS="$REASONS disk-critical"
          elif (( DISK_PERCENT > 75 )); then
            OPTIMIZATION_NEEDED=true
            REASONS="$REASONS disk-high"
          fi
          
          if (( DOCKER_SIZE_GB > MAX_DISK_USAGE_GB )); then
            OPTIMIZATION_NEEDED=true
            REASONS="$REASONS docker-oversized"
          fi
          
          echo "optimization-needed=$OPTIMIZATION_NEEDED" >> $GITHUB_OUTPUT
          echo "Optimization needed: $OPTIMIZATION_NEEDED ($REASONS)"
          
          # CPU temperature check (Pi-specific)
          if [[ -f /sys/class/thermal/thermal_zone0/temp ]]; then
            TEMP_RAW=$(cat /sys/class/thermal/thermal_zone0/temp)
            TEMP_C=$(( TEMP_RAW / 1000 ))
            echo "CPU Temperature: ${TEMP_C}°C"
            
            if (( TEMP_C > 70 )); then
              echo "⚠️ High CPU temperature detected: ${TEMP_C}°C"
              OPTIMIZATION_NEEDED=true
            fi
          fi
          
          # Check runner service status
          if systemctl is-active --quiet actions.runner || pgrep -f "Runner.Worker" >/dev/null; then
            echo "✅ GitHub Actions Runner is healthy"
          else
            echo "⚠️ GitHub Actions Runner may have issues"
          fi

      - name: System resource report
        run: |
          echo "## 📊 System Resource Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Memory Usage" >> $GITHUB_STEP_SUMMARY
          free -h >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Disk Usage" >> $GITHUB_STEP_SUMMARY
          df -h / /opt /tmp >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Docker Resources" >> $GITHUB_STEP_SUMMARY
          docker system df >> $GITHUB_STEP_SUMMARY || echo "Docker not available" >> $GITHUB_STEP_SUMMARY

  # ==============================================================================
  # INTELLIGENT CLEANUP AND OPTIMIZATION
  # ==============================================================================

  optimize-resources:
    name: "⚡ Optimize Resources"
    runs-on: self-hosted
    needs: runner-health-check
    if: needs.runner-health-check.outputs.optimization-needed == 'true' || github.event.inputs.deep_clean == 'true'
    steps:
      - name: Docker cleanup and optimization
        run: |
          echo "🧹 Optimizing Docker resources..."
          
          # Stop all non-essential containers
          echo "Stopping non-production containers..."
          docker ps --format "table {{.Names}}" | grep -E "(test|build|ci)" | xargs -r docker stop || true
          
          # Clean up Docker resources with different strategies based on urgency
          DISK_USAGE="${{ needs.runner-health-check.outputs.disk-usage }}"
          
          if (( DISK_USAGE > 15 )) || [[ "${{ github.event.inputs.deep_clean }}" == "true" ]]; then
            echo "🚨 Critical cleanup needed..."
            
            # Aggressive cleanup
            docker system prune -af --volumes
            docker builder prune -af
            
            # Remove all unused images, not just dangling ones
            docker image prune -af
            
            echo "✅ Aggressive Docker cleanup completed"
          else
            echo "🧹 Standard cleanup..."
            
            # Standard cleanup - preserve recent resources
            docker system prune -f --filter="until=${DOCKER_PRUNE_DAYS}d"
            docker image prune -f --filter="until=${DOCKER_PRUNE_DAYS}d"
            docker builder prune -f --filter="until=${DOCKER_PRUNE_DAYS}d"
            
            echo "✅ Standard Docker cleanup completed"
          fi
          
          # Show space recovered
          echo "📊 Space analysis after cleanup:"
          docker system df

      - name: System cache cleanup
        run: |
          echo "🧹 Cleaning system caches..."
          
          # Clean package manager caches
          sudo apt-get clean || true
          sudo apt-get autoremove -y || true
          
          # Clean temp directories
          sudo find /tmp -type f -atime +7 -delete 2>/dev/null || true
          sudo find /var/tmp -type f -atime +7 -delete 2>/dev/null || true
          
          # Clean user caches
          rm -rf ~/.cache/pip || true
          rm -rf ~/.cache/go-build || true
          rm -rf ~/.npm/_cacache || true
          
          # Clean GitHub Actions cache if it exists
          if [[ -d "/opt/hostedtoolcache" ]]; then
            sudo find /opt/hostedtoolcache -type d -name "*" -atime +30 -exec rm -rf {} + 2>/dev/null || true
          fi
          
          echo "✅ System cache cleanup completed"

      - name: Memory optimization
        if: github.event.inputs.optimize_memory == 'true' || needs.runner-health-check.outputs.memory-usage > env.MAX_MEMORY_USAGE_MB
        run: |
          echo "🧠 Optimizing memory usage..."
          
          # Clear page cache (safe operation)
          sudo sync
          sudo sh -c 'echo 1 > /proc/sys/vm/drop_caches' || true
          
          # Restart resource-heavy services if needed
          MEMORY_USAGE="${{ needs.runner-health-check.outputs.memory-usage }}"
          if (( MEMORY_USAGE > MAX_MEMORY_USAGE_MB )); then
            echo "Restarting Docker to free memory..."
            sudo systemctl restart docker || true
            
            # Wait for Docker to start
            sleep 30
            
            # Restart essential services
            cd /opt/sermon-uploader
            docker compose -f docker-compose.single.yml restart || true
          fi
          
          echo "✅ Memory optimization completed"

  # ==============================================================================
  # RUNNER-SPECIFIC JOB ALLOCATION STRATEGY
  # ==============================================================================

  configure-runner-strategy:
    name: "🎯 Configure Runner Strategy"
    runs-on: ubuntu-latest  # Run this on GitHub cloud to configure the strategy
    outputs:
      strategy-config: ${{ steps.strategy.outputs.config }}
    steps:
      - name: Determine optimal job allocation
        id: strategy
        run: |
          echo "🎯 Configuring runner job allocation strategy..."
          
          # Define which jobs should run where based on resource requirements and security
          cat > runner-strategy.json << 'EOF'
          {
            "github_cloud": {
              "jobs": [
                "pre-flight-security",
                "syntax-validation", 
                "build-go-backend",
                "build-frontend",
                "build-python-processor",
                "quality-gates",
                "security-scan",
                "docker-build",
                "integration-tests",
                "prepare-deployment",
                "post-deployment-validation",
                "deployment-summary"
              ],
              "reasons": [
                "High CPU/memory requirements",
                "Parallel execution capabilities", 
                "Security scanning tools",
                "Multi-architecture Docker builds",
                "Network access for package downloads",
                "Artifact storage and management"
              ]
            },
            "self_hosted_pi": {
              "jobs": [
                "deploy-blue-green",
                "runner-health-check",
                "optimize-resources"
              ],
              "reasons": [
                "Direct access to deployment target",
                "Local network connectivity",
                "System administration privileges",
                "Persistent state management",
                "Resource optimization"
              ]
            },
            "optimization_strategies": {
              "caching": {
                "go_modules": "Use GitHub Actions cache for Go modules",
                "node_modules": "Use GitHub Actions cache for npm packages",
                "docker_layers": "Use registry cache for Docker builds",
                "pip_cache": "Cache Python packages on Pi"
              },
              "resource_limits": {
                "max_parallel_jobs": 2,
                "memory_limit_mb": 1024,
                "timeout_minutes": 60,
                "cleanup_frequency": "after_each_deployment"
              }
            }
          }
          EOF
          
          # Output strategy configuration
          echo "config=$(cat runner-strategy.json | jq -c .)" >> $GITHUB_OUTPUT
          
          echo "✅ Runner strategy configured"

  # ==============================================================================
  # PERFORMANCE MONITORING AND ALERTING
  # ==============================================================================

  performance-monitoring:
    name: "📈 Performance Monitoring"
    runs-on: self-hosted
    needs: [runner-health-check, optimize-resources]
    if: always()
    steps:
      - name: Collect performance metrics
        run: |
          echo "📈 Collecting performance metrics..."
          
          # Create metrics report
          cat > performance-metrics.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "memory": {
              "used_mb": ${{ needs.runner-health-check.outputs.memory-usage || 0 }},
              "threshold_mb": ${{ env.MAX_MEMORY_USAGE_MB }},
              "status": "$([ ${{ needs.runner-health-check.outputs.memory-usage || 0 }} -lt ${{ env.MAX_MEMORY_USAGE_MB }} ] && echo "ok" || echo "warning")"
            },
            "disk": {
              "used_gb": ${{ needs.runner-health-check.outputs.disk-usage || 0 }},
              "threshold_gb": ${{ env.MAX_DISK_USAGE_GB }},
              "docker_gb": ${{ needs.runner-health-check.outputs.docker-usage || 0 }}
            },
            "optimization": {
              "performed": ${{ needs.optimize-resources.result == 'success' }},
              "needed": ${{ needs.runner-health-check.outputs.optimization-needed }}
            }
          }
          EOF
          
          echo "📊 Performance metrics collected"
          cat performance-metrics.json | jq .

      - name: Performance trend analysis
        run: |
          echo "📊 Analyzing performance trends..."
          
          # Store metrics for trend analysis (would typically go to monitoring system)
          METRICS_DIR="/opt/performance-metrics"
          mkdir -p "$METRICS_DIR"
          
          # Keep last 30 days of metrics
          find "$METRICS_DIR" -name "metrics-*.json" -mtime +30 -delete || true
          
          # Save current metrics
          cp performance-metrics.json "$METRICS_DIR/metrics-$(date +%Y%m%d-%H%M%S).json"
          
          # Calculate trends (simple example)
          RECENT_METRICS=$(find "$METRICS_DIR" -name "metrics-*.json" -mtime -7 | wc -l)
          if (( RECENT_METRICS >= 7 )); then
            echo "📈 Sufficient data for trend analysis (${RECENT_METRICS} samples)"
            
            # Average memory usage over last week
            AVG_MEMORY=$(find "$METRICS_DIR" -name "metrics-*.json" -mtime -7 -exec jq -r '.memory.used_mb' {} \; | awk '{sum+=$1; count++} END {if(count>0) print sum/count; else print 0}')
            
            echo "Average memory usage (7 days): ${AVG_MEMORY}MB"
            
            if (( $(echo "$AVG_MEMORY > $(( MAX_MEMORY_USAGE_MB * 80 / 100 ))" | bc -l) )); then
              echo "⚠️ Memory usage trending high - consider optimization"
            fi
          else
            echo "ℹ️ Insufficient data for trend analysis (need 7+ samples, have ${RECENT_METRICS})"
          fi

  # ==============================================================================
  # SUMMARY AND RECOMMENDATIONS
  # ==============================================================================

  optimization-summary:
    name: "📋 Optimization Summary"
    runs-on: ubuntu-latest
    needs: [runner-health-check, optimize-resources, configure-runner-strategy, performance-monitoring]
    if: always()
    steps:
      - name: Generate optimization report
        run: |
          echo "## 🏃 Runner Optimization Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📊 Resource Status" >> $GITHUB_STEP_SUMMARY
          echo "- Memory Usage: ${{ needs.runner-health-check.outputs.memory-usage || 'N/A' }}MB" >> $GITHUB_STEP_SUMMARY
          echo "- Disk Usage: ${{ needs.runner-health-check.outputs.disk-usage || 'N/A' }}GB" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Usage: ${{ needs.runner-health-check.outputs.docker-usage || 'N/A' }}GB" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🧹 Optimization Actions" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.optimize-resources.result }}" == "success" ]]; then
            echo "- ✅ Resource optimization completed successfully" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.runner-health-check.outputs.optimization-needed }}" == "true" ]]; then
            echo "- ⚠️ Optimization was needed but may have failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ℹ️ No optimization required" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🎯 Job Allocation Strategy" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Cloud**: Build, test, security scan, artifact management" >> $GITHUB_STEP_SUMMARY
          echo "- **Self-hosted Pi**: Deployment, system optimization, health checks" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📈 Recommendations" >> $GITHUB_STEP_SUMMARY
          
          MEMORY_USAGE="${{ needs.runner-health-check.outputs.memory-usage }}"
          DISK_USAGE="${{ needs.runner-health-check.outputs.disk-usage }}"
          
          if (( ${MEMORY_USAGE:-0} > 800 )); then
            echo "- ⚠️ Consider memory optimization - usage is high" >> $GITHUB_STEP_SUMMARY
          fi
          
          if (( ${DISK_USAGE:-0} > 10 )); then
            echo "- ⚠️ Monitor disk usage - approaching capacity limits" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- ✅ Regular optimization schedule is active" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Performance monitoring is enabled" >> $GITHUB_STEP_SUMMARY