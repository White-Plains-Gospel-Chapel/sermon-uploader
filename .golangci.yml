# golangci-lint configuration for sermon-uploader
# Enhanced with Raspberry Pi specific optimizations and performance validation
# See https://golangci-lint.run/usage/configuration/

run:
  # Timeout for analysis (increased for thorough Pi-optimized analysis)
  timeout: 10m
  
  # Include test files
  tests: true
  
  # Build tags for Pi-specific builds
  build-tags:
    - integration
    - benchmark
    - pi_optimized
  
  # Directories to skip
  skip-dirs:
    - vendor
    - .git
    - tmp
    - temp
    - uploads
    - test-uploads
    - stress-test-files
  
  # Files to skip
  skip-files:
    - ".*\\.pb\\.go$"
    - ".*_generated\\.go$"

# Output configuration
output:
  # Format of output
  format: colored-line-number
  
  # Print lines of code with issue
  print-issued-lines: true
  
  # Print linter name in the end of issue text
  print-linter-name: true
  
  # Make issues output unique by line
  uniq-by-line: true

linters-settings:
  # Errcheck settings
  errcheck:
    # Report about not checking of errors in type assertions
    check-type-assertions: true
    
    # Report about assignment of errors to blank identifier
    check-blank: true
    
    # List of functions to exclude from checking
    exclude-functions:
      - (*os.File).Close
      - (*database/sql.Rows).Close
      - (*database/sql.Stmt).Close

  # Gocyclo settings
  gocyclo:
    # Minimal code complexity to report
    min-complexity: 15

  # Gocritic settings
  gocritic:
    enabled-tags:
      - diagnostic
      - style
      - performance
      - experimental
    
    disabled-checks:
      - whyNoLint
      - unnamedResult
      - hugeParam

  # Gofmt settings
  gofmt:
    # Simplify code
    simplify: true

  # Goimports settings
  goimports:
    # Put imports beginning with prefix after 3rd-party packages
    local-prefixes: sermon-uploader

  # Golint settings
  golint:
    # Minimal confidence for issues
    min-confidence: 0.8

  # Govet settings
  govet:
    # Report about shadowed variables
    check-shadowing: true
    
    # Enable all analyzers
    enable-all: true
    
    # Disable specific analyzers
    disable:
      - fieldalignment

  # Line length settings
  lll:
    line-length: 120

  # Maligned settings
  maligned:
    # Print struct with more effective memory layout
    suggest-new: true

  # Misspell settings
  misspell:
    # Correct spellings using locale preferences for US or UK
    locale: US
    
    # List of words to ignore
    ignore-words:
      - "minio"
      - "MinIO"
      - "uploader"

  # Nakedret settings
  nakedret:
    # Make an issue if func has more lines of code than this setting
    max-func-lines: 30

  # Prealloc settings (critical for Pi memory efficiency)
  prealloc:
    # Report preallocation suggestions only on simple loops
    simple: true
    range-loops: true
    for-loops: true
    
  # Funlen settings (function length control for Pi readability)
  funlen:
    lines: 100
    statements: 50
    
  # Gocognit settings (cognitive complexity for Pi maintainability)
  gocognit:
    min-complexity: 20
    
  # Pi-specific performance settings
  gocritic:
    enabled-tags:
      - diagnostic
      - style
      - performance
      - experimental
      - opinionated
    
    enabled-checks:
      # Pi memory optimization checks
      - appendAssign
      - appendCombine
      - builtinShadow
      - captLocal
      - caseOrder
      - defaultCaseOrder
      - dupBranchBody
      - dupCase
      - dupSubExpr
      - elseif
      - emptyFallthrough
      - flagDeref
      - ifElseChain
      - mapKey
      - nestingReduce
      - newDeref
      - offBy1
      - regexpMust
      - singleCaseSwitch
      - sloppyLen
      - sloppyReassign
      - switchTrue
      - typeSwitchVar
      - underef
      - unlabelStmt
      - unslice
      # Pi-specific performance checks
      - rangeValCopy
      - hugeParam
      - rangeExprCopy
      - unnecessaryBlock
      
    disabled-checks:
      - whyNoLint
      - unnamedResult
      # Keep hugeParam enabled for Pi memory constraints

  # Revive settings (replacement for golint)
  revive:
    # Maximum number of open files at the same time
    max-open-files: 2048
    
    # When set to false, ignores files with "GENERATED" header
    ignore-generated-header: true
    
    # Sets the default severity
    severity: "warning"
    
    # Enable all available rules
    enable-all-rules: false
    
    # Sets the default failure confidence
    confidence: 0.8
    
    rules:
      # Enable specific rules
      - name: blank-imports
      - name: context-as-argument
      - name: context-keys-type
      - name: dot-imports
      - name: error-return
      - name: error-strings
      - name: error-naming
      - name: exported
      - name: if-return
      - name: increment-decrement
      - name: var-naming
      - name: var-declaration
      - name: package-comments
      - name: range
      - name: receiver-naming
      - name: time-naming
      - name: unexported-return
      - name: indent-error-flow
      - name: errorf
      - name: empty-block
      - name: superfluous-else
      - name: unused-parameter
      - name: unreachable-code
      - name: redefines-builtin-id

  # Staticcheck settings
  staticcheck:
    # Enable all checks
    checks: ["all"]

  # Stylecheck settings
  stylecheck:
    # Enable all checks
    checks: ["all"]

  # Unused settings
  unused:
    # Treat code as a program (not a library)
    check-exported: false

  # Whitespace settings
  whitespace:
    multi-if: false
    multi-func: false

linters:
  # Enable specific linters
  enable:
    # Default linters
    - errcheck
    - gosimple
    - govet
    - ineffassign
    - staticcheck
    - typecheck
    - unused
    
    # Additional linters for better code quality
    - asciicheck          # Check for non-ASCII characters
    - bidichk            # Check for dangerous unicode character sequences
    - bodyclose          # Check whether HTTP response body is closed successfully
    - contextcheck       # Check whether the function uses a non-inherited context
    - cyclop             # Check cyclomatic complexity
    - dupl               # Check code duplication
    - durationcheck      # Check for two durations multiplied together
    - errname            # Check error naming
    - errorlint          # Find misuse of error wrapping
    - execinquery        # Check query string in Query function
    - exhaustive         # Check exhaustiveness of enum switch statements
    - exportloopref      # Check for pointers to enclosing loop variables
    - forbidigo          # Forbid identifiers
    - forcetypeassert    # Find forced type assertions
    - goconst            # Find repeated strings that could be replaced by a constant
    - gocritic           # Most opinionated Go source code linter
    - gofmt              # Check whether code was gofmt-ed
    - goimports          # Check import order
    - gomnd              # Check magic numbers
    - gomoddirectives    # Manage the use of replace, retract, and excludes directives
    - gomodguard         # Allow and block list linter for direct Go module dependencies
    - goprintffuncname   # Check that printf-like functions are named with f at the end
    - gosec              # Inspect source code for security problems
    - lll                # Report long lines
    - makezero           # Find slice declarations with non-zero initial length
    - nakedret           # Find naked returns in functions greater than a specified length
    - nestif             # Report deeply nested if statements
    - nilerr             # Find the code that returns nil even if it checks that the error is not nil
    - nilnil             # Check that there is no simultaneous return of nil error and nil value
    - noctx              # Find sending http request without context.Context
    - nolintlint         # Report misuse of nolint comments
    - prealloc           # Find slice declarations that could potentially be preallocated
    - predeclared        # Find code that shadows one of Go's predeclared identifiers
    - revive             # Fast, configurable, extensible, flexible, and beautiful linter for Go
    - rowserrcheck       # Check whether Err of rows is checked successfully
    - sqlclosecheck      # Check that sql.Rows and sql.Stmt are closed
    - tenv               # Detect using os.Setenv instead of t.Setenv
    - testpackage        # Make linter that suggests using a separate _test package
    - tparallel          # Detect inappropriate usage of t.Parallel()
    - unconvert          # Remove unnecessary type conversions
    - unparam            # Report unused function parameters
    - wastedassign       # Find wasted assignment statements
    - whitespace         # Detect leading and trailing whitespace
    
    # Pi-specific performance linters
    - funlen             # Function length control for Pi readability
    - gocognit          # Cognitive complexity for Pi maintainability
    - gochecknoglobals  # Check that no globals are present
    - gochecknoinits    # Check that no init functions are present
    - godot             # Check if comments end in a period
    - godox             # Tool for detection of FIXME, TODO and other comment keywords
    - gofumpt           # Stricter gofmt
    - goheader          # Check file headers
    - gci               # Control golang package import order
    - misspell          # Find commonly misspelled English words
    - wsl               # Whitespace linter
    - nlreturn          # Check for new line before return

  # Disable problematic linters
  disable:
    - deadcode          # Deprecated
    - exhaustivestruct  # Too strict for this project
    - golint            # Deprecated, replaced by revive
    - interfacer        # Deprecated
    - maligned          # Deprecated
    - scopelint         # Deprecated
    - structcheck       # Deprecated
    - varcheck          # Deprecated

  # Don't use default excludes
  exclude-use-default: false

issues:
  # List of regexps of issue texts to exclude
  exclude:
    # Exclude some staticcheck messages
    - "SA9003:"
    - "ST1000:"
    
    # Exclude lll issues for long lines with URLs or import statements
    - "Line contains TODO/BUG/FIXME"
    
  # Exclude rules in which the issue text matches the regexp
  exclude-rules:
    # Exclude some linters from running on tests files
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec
        - goconst
        - gomnd
        - lll
        
    # Exclude magic number complaints in configuration files
    - path: config\.go
      linters:
        - gomnd
        
    # Exclude long line complaints in generated files
    - path: ".*\\.pb\\.go"
      linters:
        - lll
        
    # Exclude some staticcheck messages
    - linters:
        - staticcheck
      text: "SA9003:"
      
    # Exclude shadow warning for err variables
    - linters:
        - govet
      text: "shadows declaration at"
      
  # Show only new issues created in git patch
  new-from-rev: HEAD~1

  # Maximum issues count per one linter
  max-issues-per-linter: 50
  
  # Maximum count of issues with the same text
  max-same-issues: 3
  
  # Pi-specific issue filters
  exclude-rules:
    # Allow larger functions in main.go for Pi initialization
    - path: main\.go
      linters:
        - funlen
        - gocognit
    
    # Raspberry Pi specific exclusions
    - text: "hugeParam: parameter .* is heavy \(\d+ bytes\); consider passing it by pointer"
      linters:
        - gocritic
    
    # Allow context.Background() in main initialization for Pi
    - text: "should not use basic type string as key in context.WithValue"
      path: main\.go
      linters:
        - staticcheck
        
  # Pi-specific severity overrides for memory-critical issues
  severity-rules:
    - linters:
        - prealloc
        - gocritic
        - ineffassign
      severity: error