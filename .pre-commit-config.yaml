# Pre-commit configuration for sermon uploader
# Ensures audio quality preservation and prevents compression-introducing code

repos:
  # Standard code quality checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-added-large-files
        args: ['--maxkb=100000'] # Allow large test files up to 100MB

  # Go specific hooks
  - repo: https://github.com/dnephin/pre-commit-golang
    rev: v0.5.1
    hooks:
      - id: go-fmt
      - id: go-vet-mod
      - id: go-mod-tidy
      - id: go-test-mod
        args: [-short] # Run short tests only
      - id: golangci-lint
        args: [--config=.golangci.yml]
      - id: go-build-mod
      - id: go-mod-tidy
      - id: go-unit-tests-mod
        args: [-race, -short]

  # TypeScript/JavaScript quality
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.50.0
    hooks:
      - id: eslint
        files: \.(js|ts|tsx)$
        types: [file]
        additional_dependencies:
          - eslint@^8.50.0
          - "@typescript-eslint/parser@^6.0.0"
          - "@typescript-eslint/eslint-plugin@^6.0.0"

  # Custom hooks for audio quality validation
  - repo: local
    hooks:
      # Prevent compression-related imports/dependencies
      - id: no-compression-imports
        name: Prevent compression-introducing dependencies
        entry: hooks/check-no-compression.sh
        language: script
        files: \.(go|ts|tsx|js|json)$
        stages: [commit]

      # Validate content-type headers for audio files
      - id: validate-content-types
        name: Validate audio content-type headers
        entry: hooks/check-content-types.sh
        language: script
        files: \.(go|ts|tsx|js)$
        stages: [commit]

      # Ensure WAV files are handled as binary/raw data
      - id: validate-wav-handling
        name: Validate WAV file handling as binary data
        entry: hooks/check-wav-handling.sh
        language: script
        files: \.(go|ts|tsx|js)$
        stages: [commit]

      # Run audio preservation tests
      - id: audio-preservation-tests
        name: Run critical audio preservation tests
        entry: hooks/run-audio-tests.sh
        language: script
        pass_filenames: false
        stages: [commit]
        always_run: true

      # Validate test coverage for audio-related code
      - id: audio-test-coverage
        name: Validate test coverage for audio handling
        entry: hooks/check-audio-coverage.sh
        language: script
        files: \.(go|ts|tsx)$
        stages: [commit]

      # Check for hardcoded quality settings
      - id: no-hardcoded-quality
        name: Prevent hardcoded audio quality settings
        entry: hooks/check-quality-settings.sh
        language: script
        files: \.(go|ts|tsx|js)$
        stages: [commit]

      # Go-specific Pi optimization hooks
      - id: go-performance-check
        name: Go performance anti-pattern detection
        entry: hooks/go-performance-check.sh
        language: script
        files: \.go$
        stages: [commit]

      - id: go-memory-check
        name: Go memory usage pattern validation
        entry: hooks/go-memory-check.sh
        language: script
        files: \.go$
        stages: [commit]

      - id: go-concurrency-check
        name: Go concurrency and goroutine safety check
        entry: hooks/go-concurrency-check.sh
        language: script
        files: \.go$
        stages: [commit]

      - id: go-pi-optimization
        name: Raspberry Pi specific Go optimization validation
        entry: hooks/go-pi-optimization.sh
        language: script
        files: \.go$
        stages: [commit]

      - id: go-resource-check
        name: Go resource cleanup and leak detection
        entry: hooks/go-resource-check.sh
        language: script
        files: \.go$
        stages: [commit]

      # Benchmark regression check
      - id: go-benchmark-check
        name: Go performance benchmark validation
        entry: hooks/go-benchmark-check.sh
        language: script
        files: \.go$
        stages: [commit]
        pass_filenames: false

      # Go module vulnerability check
      - id: go-security-check
        name: Go dependency security validation
        entry: hooks/go-security-check.sh
        language: script
        files: go\.(mod|sum)$
        stages: [commit]

      # Deployment configuration validation
      - id: validate-deployment-config
        name: Validate deployment configuration and workflows
        entry: .github/pre-commit-hooks/validate-deployment-config.py
        language: python
        files: \.(yml|yaml|json|toml|mod|txt)$
        stages: [commit]
        additional_dependencies:
          - pyyaml
          - tomli