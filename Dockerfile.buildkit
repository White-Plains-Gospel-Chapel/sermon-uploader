# BuildKit cache-optimized Dockerfile for Pi 5 (2025 best practices)
# Focuses on maximum cache efficiency with mount points and layer optimization

# syntax=docker/dockerfile:1.7
ARG BUILDPLATFORM
ARG TARGETPLATFORM  
ARG TARGETOS
ARG TARGETARCH

# Frontend stage with aggressive caching
FROM --platform=$BUILDPLATFORM node:20-alpine AS frontend-builder

WORKDIR /app/frontend

# Separate package.json copy for maximum cache efficiency
COPY frontend/package.json frontend/package-lock.json ./

# Use cache mount for npm cache (persists across builds)
RUN --mount=type=cache,target=/root/.npm,sharing=locked \
    --mount=type=cache,target=node_modules,sharing=locked \
    npm ci --prefer-offline

# Copy source after dependencies for better layer caching
COPY frontend/ ./

# Use cache mount for Next.js build cache
RUN --mount=type=cache,target=/app/frontend/.next/cache,sharing=locked \
    --mount=type=cache,target=node_modules,sharing=locked \
    npm run build

# Backend stage with Go module and build caching
FROM --platform=$BUILDPLATFORM golang:1.23-alpine AS backend-builder

# Install build dependencies with version pinning
RUN apk add --no-cache git=~2.43

WORKDIR /app/backend

# Copy go.mod/sum first for module download caching
COPY backend/go.mod backend/go.sum ./

# Cache Go modules (persists across builds)
RUN --mount=type=cache,target=/go/pkg/mod,sharing=locked \
    go mod download

# Verify modules for security
RUN go mod verify

COPY backend/ ./

# Build arguments
ARG VERSION=1.1.0  
ARG GIT_COMMIT=unknown
ARG BUILD_TIME

# Cross-compile with build cache
RUN --mount=type=cache,target=/go/pkg/mod,sharing=locked \
    --mount=type=cache,target=/root/.cache/go-build,sharing=locked \
    CGO_ENABLED=0 \
    GOOS=$TARGETOS \
    GOARCH=$TARGETARCH \
    go build -ldflags="-w -s \
    -X 'sermon-uploader/config.Version=${VERSION}' \
    -X 'sermon-uploader/config.GitCommit=${GIT_COMMIT}' \
    -X 'sermon-uploader/config.BuildTime=${BUILD_TIME}'" \
    -trimpath \
    -a -installsuffix cgo -o sermon-uploader .

# Distroless final stage for minimal attack surface
FROM --platform=$TARGETPLATFORM gcr.io/distroless/static-debian12:nonroot

# Copy only what's needed
COPY --from=backend-builder /app/backend/sermon-uploader /app/sermon-uploader
COPY --from=frontend-builder /app/frontend/out /app/frontend/out

# Use distroless nonroot user (uid 65532)
USER nonroot

WORKDIR /app

EXPOSE 8000

# Simple health check for distroless
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=2 \
    CMD ["/app/sermon-uploader", "-health-check"]

ENTRYPOINT ["/app/sermon-uploader"]