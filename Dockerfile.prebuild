# Pre-built base image approach for Pi 5 (2025 best practices)  
# Uses custom base image with pre-installed dependencies for fastest builds

# syntax=docker/dockerfile:1.7
ARG BUILDPLATFORM
ARG TARGETPLATFORM
ARG TARGETOS
ARG TARGETARCH

# Frontend build - optimized with base image
FROM --platform=$BUILDPLATFORM node:20-alpine AS frontend-builder

WORKDIR /app/frontend

# Install build-time optimization tools
RUN apk add --no-cache python3 make g++

COPY frontend/package*.json ./
RUN --mount=type=cache,target=/root/.npm \
    npm ci --prefer-offline --no-audit --progress=false

COPY frontend/ ./
RUN --mount=type=cache,target=/app/frontend/.next/cache \
    NODE_ENV=production npm run build

# Backend build with optimized base
FROM --platform=$BUILDPLATFORM golang:1.23-alpine AS backend-builder

RUN apk add --no-cache git upx

WORKDIR /app/backend

COPY backend/go.mod backend/go.sum ./
RUN --mount=type=cache,target=/go/pkg/mod \
    go mod download

COPY backend/ ./

ARG VERSION=1.1.0
ARG GIT_COMMIT=unknown  
ARG BUILD_TIME

# Build and compress binary
RUN --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    CGO_ENABLED=0 \
    GOOS=$TARGETOS \
    GOARCH=$TARGETARCH \
    go build -ldflags="-w -s \
    -X 'sermon-uploader/config.Version=${VERSION}' \
    -X 'sermon-uploader/config.GitCommit=${GIT_COMMIT}' \
    -X 'sermon-uploader/config.BuildTime=${BUILD_TIME}'" \
    -trimpath -o sermon-uploader . && \
    upx --best --lzma sermon-uploader

# Custom minimal base with Pi 5 optimizations
FROM --platform=$TARGETPLATFORM alpine:3.19 AS runtime-base

# Install only essential packages with specific versions
RUN apk add --no-cache \
    ffmpeg=~6.1 \
    ca-certificates \
    curl=~8.5 \
    wget \
    bash \
    tini && \
    rm -rf /var/cache/apk/*

# Download and cache MinIO binaries
RUN ARCH=$(case $(uname -m) in aarch64) echo "arm64" ;; *) echo "amd64" ;; esac) && \
    wget -q https://dl.min.io/server/minio/release/linux-${ARCH}/minio -O /usr/local/bin/minio && \
    wget -q https://dl.min.io/client/mc/release/linux-${ARCH}/mc -O /usr/local/bin/mc && \
    chmod +x /usr/local/bin/minio /usr/local/bin/mc && \
    minio --version && mc --version

# Final optimized runtime
FROM runtime-base

WORKDIR /app

# Copy artifacts
COPY --from=backend-builder /app/backend/sermon-uploader .
COPY --from=frontend-builder /app/frontend/out ./frontend/out

# Create directories and optimized startup
RUN mkdir -p uploads temp data/minio && \
    cat > /app/start.sh << 'EOF'
#!/bin/bash
set -euo pipefail

# Fast startup with parallel initialization
{
    MINIO_ROOT_USER="${MINIO_ACCESS_KEY:-admin}" \
    MINIO_ROOT_PASSWORD="${MINIO_SECRET_KEY:-password}" \
    minio server /app/data/minio --console-address ":9001" --address ":9000" --quiet &
    MINIO_PID=$!
} &

# Quick readiness check
timeout 20 bash -c 'until curl -f http://localhost:9000/minio/health/live >/dev/null 2>&1; do sleep 0.5; done'

# Fast bucket setup
mc alias set local http://localhost:9000 "${MINIO_ACCESS_KEY:-admin}" "${MINIO_SECRET_KEY:-password}" >/dev/null
mc mb local/"${MINIO_BUCKET:-sermons}" --ignore-existing >/dev/null
mc anonymous set public local/"${MINIO_BUCKET:-sermons}" >/dev/null 2>&1 || true

exec ./sermon-uploader
EOF

RUN chmod +x /app/start.sh

# Security hardening
RUN addgroup -g 1000 -S app && \
    adduser -u 1000 -S -G app app && \
    chown -R app:app /app

USER app

EXPOSE 8000 9000 9001

# Fast health check
HEALTHCHECK --interval=15s --timeout=3s --start-period=5s --retries=2 \
    CMD curl -f http://localhost:8000/api/health >/dev/null || exit 1

ENTRYPOINT ["tini", "--"]
CMD ["/app/start.sh"]