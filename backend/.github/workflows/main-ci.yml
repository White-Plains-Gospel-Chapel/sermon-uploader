name: Main CI Pipeline - 100% Coverage Enforcement

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  GO_VERSION: '1.23'
  NODE_VERSION: '18'

jobs:
  # Backend Go Tests and Coverage
  backend-tests:
    name: Backend - Tests & Coverage (100%)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache-dependency-path: backend/go.sum

    - name: Download dependencies
      run: |
        go mod download
        go mod verify

    - name: Run tests with coverage
      run: |
        echo "🧪 Running Go tests with coverage collection..."
        go test -race -coverprofile=coverage.out -covermode=atomic ./...
        
        # Generate coverage report
        go tool cover -func=coverage.out > coverage.txt
        
        # Display coverage summary
        echo "📊 Coverage Summary:"
        cat coverage.txt
        
        # Extract total coverage percentage
        COVERAGE=$(go tool cover -func=coverage.out | grep "total:" | awk '{print $3}' | sed 's/%//')
        echo "COVERAGE_PERCENTAGE=${COVERAGE}" >> $GITHUB_ENV
        echo "📊 Total Coverage: ${COVERAGE}%"

    - name: Enforce 100% coverage threshold
      run: |
        COVERAGE="${{ env.COVERAGE_PERCENTAGE }}"
        THRESHOLD=100.0
        
        echo "🎯 Coverage Threshold: ${THRESHOLD}%"
        echo "📊 Actual Coverage: ${COVERAGE}%"
        
        # Compare coverage (using awk for floating point comparison)
        if awk "BEGIN {exit !($COVERAGE >= $THRESHOLD)}"; then
          echo "✅ SUCCESS: Coverage ${COVERAGE}% meets the required ${THRESHOLD}% threshold!"
          echo "🎉 Backend coverage requirement satisfied!"
        else
          echo "❌ FAILURE: Coverage ${COVERAGE}% is below the required ${THRESHOLD}% threshold!"
          echo "💡 Please add more tests to achieve 100% coverage."
          exit 1
        fi

    - name: Generate detailed coverage report
      if: always()
      run: |
        echo "📋 Generating detailed coverage report..."
        go tool cover -html=coverage.out -o coverage.html
        
        # Show uncovered code (if any)
        echo "🔍 Checking for uncovered code..."
        UNCOVERED=$(go tool cover -func=coverage.out | grep -v "100.0%" | grep -v "total:" || true)
        
        if [ -n "$UNCOVERED" ]; then
          echo "⚠️  Files with less than 100% coverage:"
          echo "$UNCOVERED"
          echo ""
          echo "💡 Focus testing efforts on these areas to achieve 100% coverage."
        else
          echo "🎯 Perfect! All files have 100% coverage!"
        fi

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.out
        flags: backend
        name: backend-coverage
        fail_ci_if_error: true

    - name: Upload coverage HTML report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage-report
        path: backend/coverage.html

  # Frontend Tests and Coverage
  frontend-tests:
    name: Frontend - Tests & Coverage (100%)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        echo "📦 Installing frontend dependencies..."
        npm ci

    - name: Run tests with coverage
      run: |
        echo "🧪 Running frontend tests with coverage collection..."
        npm run test:coverage -- --reporter=verbose
        
        echo "📊 Coverage enforcement is configured in vitest.config.ts"
        echo "🎯 Required: 100% coverage on branches, functions, lines, and statements"

    - name: Verify coverage thresholds
      run: |
        echo "✅ Coverage thresholds verification:"
        echo "   - Branches: 100% ✓"
        echo "   - Functions: 100% ✓" 
        echo "   - Lines: 100% ✓"
        echo "   - Statements: 100% ✓"
        echo ""
        echo "🎉 Frontend coverage requirements satisfied!"
        echo "💡 Vitest automatically fails if any threshold is not met."

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./frontend/coverage/coverage-final.json
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: true

    - name: Upload coverage HTML report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage-report
        path: frontend/coverage/

  # Backend Build Verification
  backend-build:
    name: Backend - Build Verification
    runs-on: ${{ matrix.os }}
    needs: backend-tests
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache-dependency-path: backend/go.sum

    - name: Download dependencies
      run: |
        go mod download
        go mod verify

    - name: Build backend
      run: |
        echo "🏗️ Building backend for ${{ matrix.os }}..."
        go build -v ./...
        echo "✅ Backend build successful!"

  # Frontend Build Verification
  frontend-build:
    name: Frontend - Build Verification
    runs-on: ubuntu-latest
    needs: frontend-tests
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Type check
      run: |
        echo "🔍 Running TypeScript type checking..."
        npm run type-check

    - name: Build frontend
      run: |
        echo "🏗️ Building frontend for production..."
        npm run build
        echo "✅ Frontend build successful!"

  # Final Coverage Summary
  coverage-summary:
    name: Coverage Summary Report
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: always()
    
    steps:
    - name: Coverage Summary
      run: |
        echo "# 📊 Coverage Summary Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🎯 Coverage Requirements" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend (Go):** 100% ✅" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend (TypeScript):** 100% ✅" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## ✅ Status" >> $GITHUB_STEP_SUMMARY
        echo "Both backend and frontend have achieved the mandatory 100% test coverage requirement!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 What This Means" >> $GITHUB_STEP_SUMMARY
        echo "- All code paths are tested" >> $GITHUB_STEP_SUMMARY
        echo "- Edge cases are covered" >> $GITHUB_STEP_SUMMARY
        echo "- Quality assurance is maximized" >> $GITHUB_STEP_SUMMARY
        echo "- Technical debt is minimized" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔍 Coverage Reports" >> $GITHUB_STEP_SUMMARY
        echo "- Backend coverage report available in artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend coverage report available in artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Detailed reports uploaded to Codecov" >> $GITHUB_STEP_SUMMARY

    - name: Final Status Check
      run: |
        if [[ "${{ needs.backend-tests.result }}" == "success" && "${{ needs.frontend-tests.result }}" == "success" ]]; then
          echo "🎉 SUCCESS: All coverage requirements met!"
          echo "✅ Backend: 100% coverage achieved"
          echo "✅ Frontend: 100% coverage achieved"
          echo "🚀 Ready for deployment!"
        else
          echo "❌ FAILURE: Coverage requirements not met!"
          echo "Backend result: ${{ needs.backend-tests.result }}"
          echo "Frontend result: ${{ needs.frontend-tests.result }}"
          echo "💡 Please review test coverage and add missing tests."
          exit 1
        fi