version: '3.8'

# Docker Compose for Raspberry Pi (MinIO + Processor)
# Usage: docker-compose -f docker-compose.pi.yml up

services:
  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY:-gaius}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY:-John 3:16}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Sermon Processor (WAV to AAC converter)
  sermon-processor:
    build:
      context: ./pi-processor
      dockerfile: Dockerfile
    image: ghcr.io/${GITHUB_USER}/sermon-uploader-pi:latest
    container_name: sermon-processor
    environment:
      - MINIO_ENDPOINT=minio:9000  # Use container name for internal communication
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-gaius}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-John 3:16}
      - MINIO_SECURE=${MINIO_SECURE:-false}
      - MINIO_BUCKET=${MINIO_BUCKET:-sermons}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
      - AAC_BITRATE=${AAC_BITRATE:-320k}
      - CHECK_INTERVAL=${CHECK_INTERVAL:-30}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./pi-processor/logs:/var/log
      - sermon_temp:/tmp/sermon_processing
    depends_on:
      - minio
    restart: unless-stopped

  # Optional: MinIO Client for initialization
  minio-init:
    image: minio/mc:latest
    container_name: minio-init
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      mc alias set myminio http://minio:9000 ${MINIO_ACCESS_KEY:-gaius} '${MINIO_SECRET_KEY:-John 3:16}';
      mc mb myminio/${MINIO_BUCKET:-sermons} --ignore-existing;
      mc anonymous set download myminio/${MINIO_BUCKET:-sermons}/aac;
      echo 'MinIO bucket initialized';
      "

volumes:
  minio_data:
    driver: local
  sermon_temp:
    driver: local